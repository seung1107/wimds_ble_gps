ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,4,4
  24              		.comm	ADC_countsPer10Volt,8,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 8
  29              	ADC_channelsConfig:
  30 0000 00000000 		.space	8
  30      00000000 
  31              		.section	.text.ADC_Start,"ax",%progbits
  32              		.align	2
  33              		.global	ADC_Start
  34              		.code	16
  35              		.thumb_func
  36              		.type	ADC_Start, %function
  37              	ADC_Start:
  38              	.LFB2:
  39              		.file 1 ".\\Generated_Source\\PSoC4\\ADC.c"
   1:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:.\Generated_Source\PSoC4/ADC.c **** * Version 2.30
   4:.\Generated_Source\PSoC4/ADC.c **** *
   5:.\Generated_Source\PSoC4/ADC.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC.c **** *
   9:.\Generated_Source\PSoC4/ADC.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC.c **** *
  11:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 2


  18:.\Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
  19:.\Generated_Source\PSoC4/ADC.c **** 
  20:.\Generated_Source\PSoC4/ADC.c **** 
  21:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:.\Generated_Source\PSoC4/ADC.c **** 
  28:.\Generated_Source\PSoC4/ADC.c **** 
  29:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000000u, 0x00000000u };
  34:.\Generated_Source\PSoC4/ADC.c **** 
  35:.\Generated_Source\PSoC4/ADC.c **** 
  36:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC.c **** *
  40:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC.c **** *
  45:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC.c **** *
  48:.\Generated_Source\PSoC4/ADC.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC.c **** *
  51:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:.\Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:.\Generated_Source\PSoC4/ADC.c **** *
  62:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:.\Generated_Source\PSoC4/ADC.c **** {
  40              		.loc 1 64 0
  41              		.cfi_startproc
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 3


  48              		.loc 1 66 0
  49 0004 064B     		ldr	r3, .L3
  50 0006 1B78     		ldrb	r3, [r3]
  51 0008 002B     		cmp	r3, #0
  52 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC.c ****     {
  68:.\Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  53              		.loc 1 68 0
  54 000c FFF7FEFF 		bl	ADC_Init
  69:.\Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  55              		.loc 1 69 0
  56 0010 034B     		ldr	r3, .L3
  57 0012 0122     		mov	r2, #1
  58 0014 1A70     		strb	r2, [r3]
  59              	.L2:
  70:.\Generated_Source\PSoC4/ADC.c ****     }
  71:.\Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  60              		.loc 1 71 0
  61 0016 FFF7FEFF 		bl	ADC_Enable
  72:.\Generated_Source\PSoC4/ADC.c **** }
  62              		.loc 1 72 0
  63 001a BD46     		mov	sp, r7
  64              		@ sp needed
  65 001c 80BD     		pop	{r7, pc}
  66              	.L4:
  67 001e C046     		.align	2
  68              	.L3:
  69 0020 00000000 		.word	ADC_initVar
  70              		.cfi_endproc
  71              	.LFE2:
  72              		.size	ADC_Start, .-ADC_Start
  73              		.section	.text.ADC_Init,"ax",%progbits
  74              		.align	2
  75              		.global	ADC_Init
  76              		.code	16
  77              		.thumb_func
  78              		.type	ADC_Init, %function
  79              	ADC_Init:
  80              	.LFB3:
  73:.\Generated_Source\PSoC4/ADC.c **** 
  74:.\Generated_Source\PSoC4/ADC.c **** 
  75:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC.c **** *
  79:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:.\Generated_Source\PSoC4/ADC.c **** *
  84:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC.c **** *
  87:.\Generated_Source\PSoC4/ADC.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC.c **** *
  90:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 4


  91:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:.\Generated_Source\PSoC4/ADC.c **** *
  93:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:.\Generated_Source\PSoC4/ADC.c **** {
  81              		.loc 1 95 0
  82              		.cfi_startproc
  83 0000 80B5     		push	{r7, lr}
  84              		.cfi_def_cfa_offset 8
  85              		.cfi_offset 7, -8
  86              		.cfi_offset 14, -4
  87 0002 84B0     		sub	sp, sp, #16
  88              		.cfi_def_cfa_offset 24
  89 0004 00AF     		add	r7, sp, #0
  90              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC.c **** 
 100:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC.c ****         {
 103:.\Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 9u)
 136:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 137:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_9_PIN
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 5


 138:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 9u */
 139:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 10u)
 140:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_10_PIN
 142:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 10u */
 143:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 11u)
 144:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_11_PIN
 146:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 11u */
 147:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 12u)
 148:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_12_PIN
 150:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 12u */
 151:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 13u)
 152:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_13_PIN
 154:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 13u */
 155:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 14u)
 156:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_14_PIN
 158:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 14u */
 159:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 15u)
 160:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_15_PIN
 162:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 15u */
 163:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 16u)
 164:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_16_PIN
 166:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 16u */
 167:.\Generated_Source\PSoC4/ADC.c ****         };
 168:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 169:.\Generated_Source\PSoC4/ADC.c **** 
 170:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 171:.\Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 172:.\Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  91              		.loc 1 172 0
  92 0006 0F20     		mov	r0, #15
  93 0008 0321     		mov	r1, #3
  94 000a FFF7FEFF 		bl	CyIntSetPriority
 173:.\Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  95              		.loc 1 173 0
  96 000e 664B     		ldr	r3, .L18
  97 0010 0F20     		mov	r0, #15
  98 0012 191C     		mov	r1, r3
  99 0014 FFF7FEFF 		bl	CyIntSetVector
 174:.\Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 175:.\Generated_Source\PSoC4/ADC.c **** 
 176:.\Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 177:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 100              		.loc 1 177 0
 101 0018 644B     		ldr	r3, .L18+4
 102 001a 0322     		mov	r2, #3
 103 001c 1A60     		str	r2, [r3]
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 179:.\Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:.\Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
 104              		.loc 1 180 0
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 6


 105 001e 644B     		ldr	r3, .L18+8
 106 0020 1B68     		ldr	r3, [r3]
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 107              		.loc 1 178 0
 108 0022 002B     		cmp	r3, #0
 109 0024 01DA     		bge	.L6
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 110              		.loc 1 178 0 is_stmt 0 discriminator 1
 111 0026 6349     		ldr	r1, .L18+12
 112 0028 00E0     		b	.L7
 113              	.L6:
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 114              		.loc 1 178 0 discriminator 2
 115 002a 6349     		ldr	r1, .L18+16
 116              	.L7:
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 117              		.loc 1 178 0 discriminator 4
 118 002c 634B     		ldr	r3, .L18+20
 119 002e 634A     		ldr	r2, .L18+20
 120 0030 1268     		ldr	r2, [r2]
 121 0032 0A43     		orr	r2, r1
 122 0034 1A60     		str	r2, [r3]
 181:.\Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 182:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 123              		.loc 1 182 0 is_stmt 1 discriminator 4
 124 0036 624B     		ldr	r3, .L18+24
 125 0038 624A     		ldr	r2, .L18+28
 126 003a 1A60     		str	r2, [r3]
 183:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 127              		.loc 1 183 0 discriminator 4
 128 003c 624B     		ldr	r3, .L18+32
 129 003e 634A     		ldr	r2, .L18+36
 130 0040 1A60     		str	r2, [r3]
 184:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 131              		.loc 1 184 0 discriminator 4
 132 0042 634B     		ldr	r3, .L18+40
 133 0044 0022     		mov	r2, #0
 134 0046 1A60     		str	r2, [r3]
 185:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 135              		.loc 1 185 0 discriminator 4
 136 0048 624B     		ldr	r3, .L18+44
 137 004a 634A     		ldr	r2, .L18+48
 138 004c 1A60     		str	r2, [r3]
 186:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 139              		.loc 1 186 0 discriminator 4
 140 004e 634B     		ldr	r3, .L18+52
 141 0050 614A     		ldr	r2, .L18+48
 142 0052 1A60     		str	r2, [r3]
 187:.\Generated_Source\PSoC4/ADC.c ****     
 188:.\Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 190:.\Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 143              		.loc 1 190 0 discriminator 4
 144 0054 624B     		ldr	r3, .L18+56
 145 0056 624A     		ldr	r2, .L18+56
 146 0058 1268     		ldr	r2, [r2]
 147 005a 8021     		mov	r1, #128
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 7


 148 005c 4902     		lsl	r1, r1, #9
 149 005e 0A43     		orr	r2, r1
 150 0060 1A60     		str	r2, [r3]
 191:.\Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 193:.\Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 151              		.loc 1 193 0 discriminator 4
 152 0062 604B     		ldr	r3, .L18+60
 153 0064 5F4A     		ldr	r2, .L18+60
 154 0066 1268     		ldr	r2, [r2]
 155 0068 8021     		mov	r1, #128
 156 006a 4902     		lsl	r1, r1, #9
 157 006c 0A43     		orr	r2, r1
 158 006e 1A60     		str	r2, [r3]
 194:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 195:.\Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 196:.\Generated_Source\PSoC4/ADC.c **** 
 197:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 159              		.loc 1 197 0 discriminator 4
 160 0070 5D4B     		ldr	r3, .L18+64
 161 0072 0022     		mov	r2, #0
 162 0074 1A60     		str	r2, [r3]
 198:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 163              		.loc 1 198 0 discriminator 4
 164 0076 5D4B     		ldr	r3, .L18+68
 165 0078 0022     		mov	r2, #0
 166 007a 1A60     		str	r2, [r3]
 199:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 167              		.loc 1 199 0 discriminator 4
 168 007c 5C4B     		ldr	r3, .L18+72
 169 007e 0122     		mov	r2, #1
 170 0080 1A60     		str	r2, [r3]
 200:.\Generated_Source\PSoC4/ADC.c **** 
 201:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 202:.\Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 203:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 204:.\Generated_Source\PSoC4/ADC.c **** 
 205:.\Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 206:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 171              		.loc 1 206 0 discriminator 4
 172 0082 5C4B     		ldr	r3, .L18+76
 173 0084 1B68     		ldr	r3, [r3]
 174 0086 7B60     		str	r3, [r7, #4]
 207:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 175              		.loc 1 207 0 discriminator 4
 176 0088 7B68     		ldr	r3, [r7, #4]
 177 008a 5B4A     		ldr	r2, .L18+80
 178 008c 1340     		and	r3, r2
 179 008e 7B60     		str	r3, [r7, #4]
 208:.\Generated_Source\PSoC4/ADC.c ****     
 209:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 210:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 211:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 212:.\Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 213:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 214:.\Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 215:.\Generated_Source\PSoC4/ADC.c ****     #else
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 8


 216:.\Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 217:.\Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 218:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 219:.\Generated_Source\PSoC4/ADC.c ****         #else
 220:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 180              		.loc 1 220 0 discriminator 4
 181 0090 7B68     		ldr	r3, [r7, #4]
 182 0092 8022     		mov	r2, #128
 183 0094 9205     		lsl	r2, r2, #22
 184 0096 1343     		orr	r3, r2
 185 0098 7B60     		str	r3, [r7, #4]
 221:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 186              		.loc 1 221 0 discriminator 4
 187 009a 7B68     		ldr	r3, [r7, #4]
 188 009c 0122     		mov	r2, #1
 189 009e 9343     		bic	r3, r2
 190 00a0 7B60     		str	r3, [r7, #4]
 222:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 223:.\Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 224:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 225:.\Generated_Source\PSoC4/ADC.c ****     
 226:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 191              		.loc 1 226 0 discriminator 4
 192 00a2 544B     		ldr	r3, .L18+76
 193 00a4 7A68     		ldr	r2, [r7, #4]
 194 00a6 1A60     		str	r2, [r3]
 227:.\Generated_Source\PSoC4/ADC.c **** 
 228:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 229:.\Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 230:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 231:.\Generated_Source\PSoC4/ADC.c **** 
 232:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 195              		.loc 1 232 0 discriminator 4
 196 00a8 0023     		mov	r3, #0
 197 00aa FB60     		str	r3, [r7, #12]
 198 00ac 75E0     		b	.L8
 199              	.L17:
 233:.\Generated_Source\PSoC4/ADC.c ****     {
 234:.\Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 200              		.loc 1 234 0
 201 00ae 534B     		ldr	r3, .L18+84
 202 00b0 FA68     		ldr	r2, [r7, #12]
 203 00b2 9200     		lsl	r2, r2, #2
 204 00b4 D258     		ldr	r2, [r2, r3]
 205 00b6 DC23     		mov	r3, #220
 206 00b8 9B01     		lsl	r3, r3, #6
 207 00ba 1340     		and	r3, r2
 208 00bc 7B60     		str	r3, [r7, #4]
 235:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 236:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 209              		.loc 1 236 0
 210 00be 504A     		ldr	r2, .L18+88
 211 00c0 FB68     		ldr	r3, [r7, #12]
 212 00c2 D318     		add	r3, r2, r3
 213 00c4 1B78     		ldrb	r3, [r3]
 214 00c6 1A1C     		mov	r2, r3
 215 00c8 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 9


 216 00ca 1343     		orr	r3, r2
 217 00cc 7B60     		str	r3, [r7, #4]
 237:.\Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 238:.\Generated_Source\PSoC4/ADC.c ****         
 239:.\Generated_Source\PSoC4/ADC.c ****         
 240:.\Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:.\Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:.\Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 243:.\Generated_Source\PSoC4/ADC.c ****         */
 244:.\Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 245:.\Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 246:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 247:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 248:.\Generated_Source\PSoC4/ADC.c **** 
 249:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 250:.\Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 251:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 252:.\Generated_Source\PSoC4/ADC.c ****         {
 253:.\Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 218              		.loc 1 253 0
 219 00ce FB68     		ldr	r3, [r7, #12]
 220 00d0 9B00     		lsl	r3, r3, #2
 221 00d2 4C4A     		ldr	r2, .L18+92
 222 00d4 9446     		mov	ip, r2
 223 00d6 6344     		add	r3, r3, ip
 224 00d8 7A68     		ldr	r2, [r7, #4]
 225 00da 1A60     		str	r2, [r3]
 254:.\Generated_Source\PSoC4/ADC.c **** 
 255:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 226              		.loc 1 255 0
 227 00dc 474B     		ldr	r3, .L18+84
 228 00de FA68     		ldr	r2, [r7, #12]
 229 00e0 9200     		lsl	r2, r2, #2
 230 00e2 D358     		ldr	r3, [r2, r3]
 231 00e4 0122     		mov	r2, #1
 232 00e6 1340     		and	r3, r2
 233 00e8 09D0     		beq	.L9
 256:.\Generated_Source\PSoC4/ADC.c ****             {
 257:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 234              		.loc 1 257 0
 235 00ea 3F4B     		ldr	r3, .L18+64
 236 00ec 3E4A     		ldr	r2, .L18+64
 237 00ee 1268     		ldr	r2, [r2]
 238 00f0 F968     		ldr	r1, [r7, #12]
 239 00f2 0120     		mov	r0, #1
 240 00f4 8840     		lsl	r0, r0, r1
 241 00f6 011C     		mov	r1, r0
 242 00f8 89B2     		uxth	r1, r1
 243 00fa 0A43     		orr	r2, r1
 244 00fc 1A60     		str	r2, [r3]
 245              	.L9:
 258:.\Generated_Source\PSoC4/ADC.c ****             }
 259:.\Generated_Source\PSoC4/ADC.c **** 
 260:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 246              		.loc 1 260 0
 247 00fe 3F4B     		ldr	r3, .L18+84
 248 0100 FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 10


 249 0102 9200     		lsl	r2, r2, #2
 250 0104 D358     		ldr	r3, [r2, r3]
 251 0106 0222     		mov	r2, #2
 252 0108 1340     		and	r3, r2
 253 010a 09D0     		beq	.L10
 261:.\Generated_Source\PSoC4/ADC.c ****             {
 262:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 254              		.loc 1 262 0
 255 010c 374B     		ldr	r3, .L18+68
 256 010e 374A     		ldr	r2, .L18+68
 257 0110 1268     		ldr	r2, [r2]
 258 0112 F968     		ldr	r1, [r7, #12]
 259 0114 0120     		mov	r0, #1
 260 0116 8840     		lsl	r0, r0, r1
 261 0118 011C     		mov	r1, r0
 262 011a 89B2     		uxth	r1, r1
 263 011c 0A43     		orr	r2, r1
 264 011e 1A60     		str	r2, [r3]
 265              	.L10:
 263:.\Generated_Source\PSoC4/ADC.c ****             }
 264:.\Generated_Source\PSoC4/ADC.c ****         }
 265:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 266:.\Generated_Source\PSoC4/ADC.c ****             else
 267:.\Generated_Source\PSoC4/ADC.c ****             {
 268:.\Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 269:.\Generated_Source\PSoC4/ADC.c **** 
 270:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 271:.\Generated_Source\PSoC4/ADC.c ****                 {
 272:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 273:.\Generated_Source\PSoC4/ADC.c ****                 }
 274:.\Generated_Source\PSoC4/ADC.c **** 
 275:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 276:.\Generated_Source\PSoC4/ADC.c ****                 {
 277:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 278:.\Generated_Source\PSoC4/ADC.c ****                 }
 279:.\Generated_Source\PSoC4/ADC.c ****             }
 280:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 281:.\Generated_Source\PSoC4/ADC.c **** 
 282:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 266              		.loc 1 282 0
 267 0120 364B     		ldr	r3, .L18+84
 268 0122 FA68     		ldr	r2, [r7, #12]
 269 0124 9200     		lsl	r2, r2, #2
 270 0126 D258     		ldr	r2, [r2, r3]
 271 0128 8023     		mov	r3, #128
 272 012a 9B00     		lsl	r3, r3, #2
 273 012c 1340     		and	r3, r2
 274 012e 03D0     		beq	.L11
 283:.\Generated_Source\PSoC4/ADC.c ****         {
 284:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 275              		.loc 1 284 0
 276 0130 8023     		mov	r3, #128
 277 0132 5B00     		lsl	r3, r3, #1
 278 0134 BB60     		str	r3, [r7, #8]
 279 0136 02E0     		b	.L12
 280              	.L11:
 285:.\Generated_Source\PSoC4/ADC.c ****         }
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 11


 286:.\Generated_Source\PSoC4/ADC.c ****         else
 287:.\Generated_Source\PSoC4/ADC.c ****         {
 288:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 281              		.loc 1 288 0
 282 0138 8023     		mov	r3, #128
 283 013a 5B01     		lsl	r3, r3, #5
 284 013c BB60     		str	r3, [r7, #8]
 285              	.L12:
 289:.\Generated_Source\PSoC4/ADC.c ****         }
 290:.\Generated_Source\PSoC4/ADC.c **** 
 291:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 286              		.loc 1 291 0
 287 013e 2F4B     		ldr	r3, .L18+84
 288 0140 FA68     		ldr	r2, [r7, #12]
 289 0142 9200     		lsl	r2, r2, #2
 290 0144 D258     		ldr	r2, [r2, r3]
 291 0146 8023     		mov	r3, #128
 292 0148 5B00     		lsl	r3, r3, #1
 293 014a 1340     		and	r3, r2
 294 014c 05D1     		bne	.L13
 292:.\Generated_Source\PSoC4/ADC.c ****         {
 293:.\Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 294:.\Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 295:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 297:.\Generated_Source\PSoC4/ADC.c ****             #else
 298:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 295              		.loc 1 298 0
 296 014e 2E4B     		ldr	r3, .L18+96
 297 0150 FA68     		ldr	r2, [r7, #12]
 298 0152 5200     		lsl	r2, r2, #1
 299 0154 0021     		mov	r1, #0
 300 0156 D152     		strh	r1, [r2, r3]
 301 0158 09E0     		b	.L14
 302              	.L13:
 299:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 300:.\Generated_Source\PSoC4/ADC.c ****         }
 301:.\Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 302:.\Generated_Source\PSoC4/ADC.c ****         {
 303:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 304:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 303              		.loc 1 305 0
 304 015a BB68     		ldr	r3, [r7, #8]
 305 015c 002B     		cmp	r3, #0
 306 015e 00DA     		bge	.L15
 307 0160 0133     		add	r3, r3, #1
 308              	.L15:
 309 0162 5B10     		asr	r3, r3, #1
 310 0164 99B2     		uxth	r1, r3
 311 0166 284B     		ldr	r3, .L18+96
 312 0168 FA68     		ldr	r2, [r7, #12]
 313 016a 5200     		lsl	r2, r2, #1
 314 016c D152     		strh	r1, [r2, r3]
 315              	.L14:
 306:.\Generated_Source\PSoC4/ADC.c ****             #else
 307:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 12


 308:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 309:.\Generated_Source\PSoC4/ADC.c ****         }
 310:.\Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 311:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 316              		.loc 1 311 0 discriminator 2
 317 016e BB68     		ldr	r3, [r7, #8]
 318 0170 264A     		ldr	r2, .L18+100
 319 0172 5343     		mul	r3, r2
 320 0174 8022     		mov	r2, #128
 321 0176 D200     		lsl	r2, r2, #3
 322 0178 9446     		mov	ip, r2
 323 017a 6344     		add	r3, r3, ip
 312:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 324              		.loc 1 312 0 discriminator 2
 325 017c 002B     		cmp	r3, #0
 326 017e 02DA     		bge	.L16
 327 0180 234A     		ldr	r2, .L18+104
 328 0182 9446     		mov	ip, r2
 329 0184 6344     		add	r3, r3, ip
 330              	.L16:
 331 0186 DB12     		asr	r3, r3, #11
 311:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 332              		.loc 1 311 0 discriminator 2
 333 0188 9BB2     		uxth	r3, r3
 334 018a 19B2     		sxth	r1, r3
 335 018c 214B     		ldr	r3, .L18+108
 336 018e FA68     		ldr	r2, [r7, #12]
 337 0190 9200     		lsl	r2, r2, #2
 338 0192 D150     		str	r1, [r2, r3]
 232:.\Generated_Source\PSoC4/ADC.c ****     {
 339              		.loc 1 232 0 discriminator 2
 340 0194 FB68     		ldr	r3, [r7, #12]
 341 0196 0133     		add	r3, r3, #1
 342 0198 FB60     		str	r3, [r7, #12]
 343              	.L8:
 232:.\Generated_Source\PSoC4/ADC.c ****     {
 344              		.loc 1 232 0 is_stmt 0 discriminator 1
 345 019a FB68     		ldr	r3, [r7, #12]
 346 019c 012B     		cmp	r3, #1
 347 019e 86D9     		bls	.L17
 313:.\Generated_Source\PSoC4/ADC.c ****     }
 314:.\Generated_Source\PSoC4/ADC.c **** }
 348              		.loc 1 314 0 is_stmt 1
 349 01a0 BD46     		mov	sp, r7
 350 01a2 04B0     		add	sp, sp, #16
 351              		@ sp needed
 352 01a4 80BD     		pop	{r7, pc}
 353              	.L19:
 354 01a6 C046     		.align	2
 355              	.L18:
 356 01a8 00000000 		.word	ADC_ISR
 357 01ac 20003A40 		.word	1077542944
 358 01b0 80033A40 		.word	1077543808
 359 01b4 C0201013 		.word	319824064
 360 01b8 C0200013 		.word	318775488
 361 01bc 00003A40 		.word	1077542912
 362 01c0 04003A40 		.word	1077542916
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 13


 363 01c4 C4000A80 		.word	-2146828092
 364 01c8 18003A40 		.word	1077542936
 365 01cc 0000FF07 		.word	134152192
 366 01d0 1C003A40 		.word	1077542940
 367 01d4 10003A40 		.word	1077542928
 368 01d8 02000200 		.word	131074
 369 01dc 14003A40 		.word	1077542932
 370 01e0 00033A40 		.word	1077543680
 371 01e4 40033A40 		.word	1077543744
 372 01e8 28023A40 		.word	1077543464
 373 01ec 38023A40 		.word	1077543480
 374 01f0 18023A40 		.word	1077543448
 375 01f4 30003A40 		.word	1077542960
 376 01f8 FFFFFFDF 		.word	-536870913
 377 01fc 00000000 		.word	ADC_channelsConfig
 378 0200 08000000 		.word	ADC_InputsPlacement.4768
 379 0204 80003A40 		.word	1077543040
 380 0208 00000000 		.word	ADC_offset
 381 020c 10270000 		.word	10000
 382 0210 FF070000 		.word	2047
 383 0214 00000000 		.word	ADC_countsPer10Volt
 384              		.cfi_endproc
 385              	.LFE3:
 386              		.size	ADC_Init, .-ADC_Init
 387              		.section	.text.ADC_Enable,"ax",%progbits
 388              		.align	2
 389              		.global	ADC_Enable
 390              		.code	16
 391              		.thumb_func
 392              		.type	ADC_Enable, %function
 393              	ADC_Enable:
 394              	.LFB4:
 315:.\Generated_Source\PSoC4/ADC.c **** 
 316:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 317:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 318:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 319:.\Generated_Source\PSoC4/ADC.c **** *
 320:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 321:.\Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 322:.\Generated_Source\PSoC4/ADC.c **** *
 323:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 324:.\Generated_Source\PSoC4/ADC.c **** *  None.
 325:.\Generated_Source\PSoC4/ADC.c **** *
 326:.\Generated_Source\PSoC4/ADC.c **** * Return:
 327:.\Generated_Source\PSoC4/ADC.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC.c **** *
 329:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:.\Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 331:.\Generated_Source\PSoC4/ADC.c **** {
 395              		.loc 1 331 0
 396              		.cfi_startproc
 397 0000 80B5     		push	{r7, lr}
 398              		.cfi_def_cfa_offset 8
 399              		.cfi_offset 7, -8
 400              		.cfi_offset 14, -4
 401 0002 00AF     		add	r7, sp, #0
 402              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 14


 332:.\Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 403              		.loc 1 332 0
 404 0004 0A4B     		ldr	r3, .L23
 405 0006 1B68     		ldr	r3, [r3]
 406 0008 002B     		cmp	r3, #0
 407 000a 0EDB     		blt	.L20
 333:.\Generated_Source\PSoC4/ADC.c ****     {
 334:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0)
 335:.\Generated_Source\PSoC4/ADC.c **** 
 336:.\Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 408              		.loc 1 336 0
 409 000c C046     		mov	r8, r8
 410              	.L22:
 411              		.loc 1 336 0 is_stmt 0 discriminator 1
 412 000e 094B     		ldr	r3, .L23+4
 413 0010 1B68     		ldr	r3, [r3]
 414 0012 002B     		cmp	r3, #0
 415 0014 FBDB     		blt	.L22
 337:.\Generated_Source\PSoC4/ADC.c ****             {
 338:.\Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:.\Generated_Source\PSoC4/ADC.c ****             }
 340:.\Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0) */
 341:.\Generated_Source\PSoC4/ADC.c ****         
 342:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 416              		.loc 1 342 0 is_stmt 1
 417 0016 064B     		ldr	r3, .L23
 418 0018 054A     		ldr	r2, .L23
 419 001a 1268     		ldr	r2, [r2]
 420 001c 8021     		mov	r1, #128
 421 001e 0906     		lsl	r1, r1, #24
 422 0020 0A43     		orr	r2, r1
 423 0022 1A60     		str	r2, [r3]
 343:.\Generated_Source\PSoC4/ADC.c ****         
 344:.\Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:.\Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 424              		.loc 1 345 0
 425 0024 0A20     		mov	r0, #10
 426 0026 FFF7FEFF 		bl	CyDelayUs
 427              	.L20:
 346:.\Generated_Source\PSoC4/ADC.c ****     }
 347:.\Generated_Source\PSoC4/ADC.c **** }
 428              		.loc 1 347 0
 429 002a BD46     		mov	sp, r7
 430              		@ sp needed
 431 002c 80BD     		pop	{r7, pc}
 432              	.L24:
 433 002e C046     		.align	2
 434              	.L23:
 435 0030 00003A40 		.word	1077542912
 436 0034 08023A40 		.word	1077543432
 437              		.cfi_endproc
 438              	.LFE4:
 439              		.size	ADC_Enable, .-ADC_Enable
 440              		.section	.text.ADC_Stop,"ax",%progbits
 441              		.align	2
 442              		.global	ADC_Stop
 443              		.code	16
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 15


 444              		.thumb_func
 445              		.type	ADC_Stop, %function
 446              	ADC_Stop:
 447              	.LFB5:
 348:.\Generated_Source\PSoC4/ADC.c **** 
 349:.\Generated_Source\PSoC4/ADC.c **** 
 350:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 351:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 352:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 353:.\Generated_Source\PSoC4/ADC.c **** *
 354:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 355:.\Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:.\Generated_Source\PSoC4/ADC.c **** *  mode.
 357:.\Generated_Source\PSoC4/ADC.c **** *
 358:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 359:.\Generated_Source\PSoC4/ADC.c **** *  None.
 360:.\Generated_Source\PSoC4/ADC.c **** *
 361:.\Generated_Source\PSoC4/ADC.c **** * Return:
 362:.\Generated_Source\PSoC4/ADC.c **** *  None.
 363:.\Generated_Source\PSoC4/ADC.c **** *
 364:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 365:.\Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 366:.\Generated_Source\PSoC4/ADC.c **** {
 448              		.loc 1 366 0
 449              		.cfi_startproc
 450 0000 80B5     		push	{r7, lr}
 451              		.cfi_def_cfa_offset 8
 452              		.cfi_offset 7, -8
 453              		.cfi_offset 14, -4
 454 0002 00AF     		add	r7, sp, #0
 455              		.cfi_def_cfa_register 7
 367:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 456              		.loc 1 367 0
 457 0004 034B     		ldr	r3, .L26
 458 0006 034A     		ldr	r2, .L26
 459 0008 1268     		ldr	r2, [r2]
 460 000a 5200     		lsl	r2, r2, #1
 461 000c 5208     		lsr	r2, r2, #1
 462 000e 1A60     		str	r2, [r3]
 368:.\Generated_Source\PSoC4/ADC.c **** }
 463              		.loc 1 368 0
 464 0010 BD46     		mov	sp, r7
 465              		@ sp needed
 466 0012 80BD     		pop	{r7, pc}
 467              	.L27:
 468              		.align	2
 469              	.L26:
 470 0014 00003A40 		.word	1077542912
 471              		.cfi_endproc
 472              	.LFE5:
 473              		.size	ADC_Stop, .-ADC_Stop
 474              		.section	.text.ADC_StartConvert,"ax",%progbits
 475              		.align	2
 476              		.global	ADC_StartConvert
 477              		.code	16
 478              		.thumb_func
 479              		.type	ADC_StartConvert, %function
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 16


 480              	ADC_StartConvert:
 481              	.LFB6:
 369:.\Generated_Source\PSoC4/ADC.c **** 
 370:.\Generated_Source\PSoC4/ADC.c **** 
 371:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 372:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 373:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 374:.\Generated_Source\PSoC4/ADC.c **** *
 375:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 376:.\Generated_Source\PSoC4/ADC.c **** *  Description:
 377:.\Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 378:.\Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 379:.\Generated_Source\PSoC4/ADC.c **** *
 380:.\Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 381:.\Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:.\Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 383:.\Generated_Source\PSoC4/ADC.c **** *
 384:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 385:.\Generated_Source\PSoC4/ADC.c **** *  None.
 386:.\Generated_Source\PSoC4/ADC.c **** *
 387:.\Generated_Source\PSoC4/ADC.c **** * Return:
 388:.\Generated_Source\PSoC4/ADC.c **** *  None.
 389:.\Generated_Source\PSoC4/ADC.c **** *
 390:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 391:.\Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 392:.\Generated_Source\PSoC4/ADC.c **** {
 482              		.loc 1 392 0
 483              		.cfi_startproc
 484 0000 80B5     		push	{r7, lr}
 485              		.cfi_def_cfa_offset 8
 486              		.cfi_offset 7, -8
 487              		.cfi_offset 14, -4
 488 0002 00AF     		add	r7, sp, #0
 489              		.cfi_def_cfa_register 7
 393:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 394:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 395:.\Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 396:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 490              		.loc 1 396 0
 491 0004 024B     		ldr	r3, .L29
 492 0006 0122     		mov	r2, #1
 493 0008 1A60     		str	r2, [r3]
 397:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 398:.\Generated_Source\PSoC4/ADC.c **** 
 399:.\Generated_Source\PSoC4/ADC.c **** }
 494              		.loc 1 399 0
 495 000a BD46     		mov	sp, r7
 496              		@ sp needed
 497 000c 80BD     		pop	{r7, pc}
 498              	.L30:
 499 000e C046     		.align	2
 500              	.L29:
 501 0010 24003A40 		.word	1077542948
 502              		.cfi_endproc
 503              	.LFE6:
 504              		.size	ADC_StartConvert, .-ADC_StartConvert
 505              		.section	.text.ADC_StopConvert,"ax",%progbits
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 17


 506              		.align	2
 507              		.global	ADC_StopConvert
 508              		.code	16
 509              		.thumb_func
 510              		.type	ADC_StopConvert, %function
 511              	ADC_StopConvert:
 512              	.LFB7:
 400:.\Generated_Source\PSoC4/ADC.c **** 
 401:.\Generated_Source\PSoC4/ADC.c **** 
 402:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 403:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 404:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 405:.\Generated_Source\PSoC4/ADC.c **** *
 406:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 407:.\Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 408:.\Generated_Source\PSoC4/ADC.c **** *
 409:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 410:.\Generated_Source\PSoC4/ADC.c **** *  None.
 411:.\Generated_Source\PSoC4/ADC.c **** *
 412:.\Generated_Source\PSoC4/ADC.c **** * Return:
 413:.\Generated_Source\PSoC4/ADC.c **** *  None.
 414:.\Generated_Source\PSoC4/ADC.c **** *
 415:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 416:.\Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 417:.\Generated_Source\PSoC4/ADC.c **** {
 513              		.loc 1 417 0
 514              		.cfi_startproc
 515 0000 80B5     		push	{r7, lr}
 516              		.cfi_def_cfa_offset 8
 517              		.cfi_offset 7, -8
 518              		.cfi_offset 14, -4
 519 0002 00AF     		add	r7, sp, #0
 520              		.cfi_def_cfa_register 7
 418:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 419:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 420:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 421:.\Generated_Source\PSoC4/ADC.c **** }
 521              		.loc 1 421 0
 522 0004 BD46     		mov	sp, r7
 523              		@ sp needed
 524 0006 80BD     		pop	{r7, pc}
 525              		.cfi_endproc
 526              	.LFE7:
 527              		.size	ADC_StopConvert, .-ADC_StopConvert
 528              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 529              		.align	2
 530              		.global	ADC_IsEndConversion
 531              		.code	16
 532              		.thumb_func
 533              		.type	ADC_IsEndConversion, %function
 534              	ADC_IsEndConversion:
 535              	.LFB8:
 422:.\Generated_Source\PSoC4/ADC.c **** 
 423:.\Generated_Source\PSoC4/ADC.c **** 
 424:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 425:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 426:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 18


 427:.\Generated_Source\PSoC4/ADC.c **** *
 428:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 429:.\Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 430:.\Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:.\Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 432:.\Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 433:.\Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 434:.\Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 435:.\Generated_Source\PSoC4/ADC.c **** *  completed.
 436:.\Generated_Source\PSoC4/ADC.c **** *
 437:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 438:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:.\Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 442:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:.\Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 444:.\Generated_Source\PSoC4/ADC.c **** *
 445:.\Generated_Source\PSoC4/ADC.c **** * Return:
 446:.\Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:.\Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:.\Generated_Source\PSoC4/ADC.c **** *
 449:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 450:.\Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 451:.\Generated_Source\PSoC4/ADC.c **** {
 536              		.loc 1 451 0
 537              		.cfi_startproc
 538 0000 80B5     		push	{r7, lr}
 539              		.cfi_def_cfa_offset 8
 540              		.cfi_offset 7, -8
 541              		.cfi_offset 14, -4
 542 0002 84B0     		sub	sp, sp, #16
 543              		.cfi_def_cfa_offset 24
 544 0004 00AF     		add	r7, sp, #0
 545              		.cfi_def_cfa_register 7
 546 0006 7860     		str	r0, [r7, #4]
 452:.\Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 547              		.loc 1 452 0
 548 0008 0023     		mov	r3, #0
 549 000a FB60     		str	r3, [r7, #12]
 453:.\Generated_Source\PSoC4/ADC.c **** 
 454:.\Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 550              		.loc 1 454 0
 551 000c 7B68     		ldr	r3, [r7, #4]
 552 000e 0322     		mov	r2, #3
 553 0010 1340     		and	r3, r2
 554 0012 11D0     		beq	.L33
 555              	.L35:
 455:.\Generated_Source\PSoC4/ADC.c ****     {
 456:.\Generated_Source\PSoC4/ADC.c ****         do
 457:.\Generated_Source\PSoC4/ADC.c ****         {
 458:.\Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 556              		.loc 1 458 0 discriminator 2
 557 0014 0B4B     		ldr	r3, .L37
 558 0016 1B68     		ldr	r3, [r3]
 559 0018 0122     		mov	r2, #1
 560 001a 1340     		and	r3, r2
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 19


 561 001c FB60     		str	r3, [r7, #12]
 459:.\Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 562              		.loc 1 459 0 discriminator 2
 563 001e FB68     		ldr	r3, [r7, #12]
 564 0020 002B     		cmp	r3, #0
 565 0022 03D1     		bne	.L34
 566              		.loc 1 459 0 is_stmt 0 discriminator 1
 567 0024 7B68     		ldr	r3, [r7, #4]
 568 0026 0222     		mov	r2, #2
 569 0028 1340     		and	r3, r2
 570 002a F3D1     		bne	.L35
 571              	.L34:
 460:.\Generated_Source\PSoC4/ADC.c **** 
 461:.\Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 572              		.loc 1 461 0 is_stmt 1
 573 002c FB68     		ldr	r3, [r7, #12]
 574 002e 002B     		cmp	r3, #0
 575 0030 02D0     		beq	.L33
 462:.\Generated_Source\PSoC4/ADC.c ****         {
 463:.\Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 464:.\Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 576              		.loc 1 464 0
 577 0032 044B     		ldr	r3, .L37
 578 0034 0122     		mov	r2, #1
 579 0036 1A60     		str	r2, [r3]
 580              	.L33:
 465:.\Generated_Source\PSoC4/ADC.c ****         }
 466:.\Generated_Source\PSoC4/ADC.c ****     }
 467:.\Generated_Source\PSoC4/ADC.c **** 
 468:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 469:.\Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 470:.\Generated_Source\PSoC4/ADC.c ****         {
 471:.\Generated_Source\PSoC4/ADC.c ****             do
 472:.\Generated_Source\PSoC4/ADC.c ****             {
 473:.\Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 474:.\Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 475:.\Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 476:.\Generated_Source\PSoC4/ADC.c **** 
 477:.\Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 478:.\Generated_Source\PSoC4/ADC.c ****             {
 479:.\Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 480:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 481:.\Generated_Source\PSoC4/ADC.c ****             }
 482:.\Generated_Source\PSoC4/ADC.c ****         }
 483:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 484:.\Generated_Source\PSoC4/ADC.c **** 
 485:.\Generated_Source\PSoC4/ADC.c ****     return (status);
 581              		.loc 1 485 0
 582 0038 FB68     		ldr	r3, [r7, #12]
 486:.\Generated_Source\PSoC4/ADC.c **** }
 583              		.loc 1 486 0
 584 003a 181C     		mov	r0, r3
 585 003c BD46     		mov	sp, r7
 586 003e 04B0     		add	sp, sp, #16
 587              		@ sp needed
 588 0040 80BD     		pop	{r7, pc}
 589              	.L38:
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 20


 590 0042 C046     		.align	2
 591              	.L37:
 592 0044 10023A40 		.word	1077543440
 593              		.cfi_endproc
 594              	.LFE8:
 595              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 596              		.section	.text.ADC_GetResult16,"ax",%progbits
 597              		.align	2
 598              		.global	ADC_GetResult16
 599              		.code	16
 600              		.thumb_func
 601              		.type	ADC_GetResult16, %function
 602              	ADC_GetResult16:
 603              	.LFB9:
 487:.\Generated_Source\PSoC4/ADC.c **** 
 488:.\Generated_Source\PSoC4/ADC.c **** 
 489:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 490:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 491:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 492:.\Generated_Source\PSoC4/ADC.c **** *
 493:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 494:.\Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 495:.\Generated_Source\PSoC4/ADC.c **** *
 496:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 497:.\Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:.\Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:.\Generated_Source\PSoC4/ADC.c **** *
 500:.\Generated_Source\PSoC4/ADC.c **** * Return:
 501:.\Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 502:.\Generated_Source\PSoC4/ADC.c **** *
 503:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 504:.\Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 505:.\Generated_Source\PSoC4/ADC.c **** {
 604              		.loc 1 505 0
 605              		.cfi_startproc
 606 0000 80B5     		push	{r7, lr}
 607              		.cfi_def_cfa_offset 8
 608              		.cfi_offset 7, -8
 609              		.cfi_offset 14, -4
 610 0002 84B0     		sub	sp, sp, #16
 611              		.cfi_def_cfa_offset 24
 612 0004 00AF     		add	r7, sp, #0
 613              		.cfi_def_cfa_register 7
 614 0006 7860     		str	r0, [r7, #4]
 506:.\Generated_Source\PSoC4/ADC.c ****     uint32 result;
 507:.\Generated_Source\PSoC4/ADC.c **** 
 508:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 615              		.loc 1 509 0
 616 0008 7B68     		ldr	r3, [r7, #4]
 617 000a 012B     		cmp	r3, #1
 618 000c 02D9     		bls	.L40
 619              		.loc 1 509 0 is_stmt 0 discriminator 1
 620 000e 0020     		mov	r0, #0
 621 0010 FFF7FEFF 		bl	CyHalt
 622              	.L40:
 510:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 21


 511:.\Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 623              		.loc 1 511 0 is_stmt 1
 624 0014 7B68     		ldr	r3, [r7, #4]
 625 0016 012B     		cmp	r3, #1
 626 0018 09D8     		bhi	.L41
 512:.\Generated_Source\PSoC4/ADC.c ****     {
 513:.\Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 627              		.loc 1 513 0
 628 001a 7B68     		ldr	r3, [r7, #4]
 629 001c 9B00     		lsl	r3, r3, #2
 630 001e 084A     		ldr	r2, .L44
 631 0020 9446     		mov	ip, r2
 632 0022 6344     		add	r3, r3, ip
 633 0024 1B68     		ldr	r3, [r3]
 634 0026 1B04     		lsl	r3, r3, #16
 635 0028 1B0C     		lsr	r3, r3, #16
 636 002a FB60     		str	r3, [r7, #12]
 637 002c 01E0     		b	.L42
 638              	.L41:
 514:.\Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 515:.\Generated_Source\PSoC4/ADC.c ****     }
 516:.\Generated_Source\PSoC4/ADC.c ****     else
 517:.\Generated_Source\PSoC4/ADC.c ****     {
 518:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 519:.\Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 520:.\Generated_Source\PSoC4/ADC.c ****         #else
 521:.\Generated_Source\PSoC4/ADC.c ****             result = 0u;
 639              		.loc 1 521 0
 640 002e 0023     		mov	r3, #0
 641 0030 FB60     		str	r3, [r7, #12]
 642              	.L42:
 522:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 523:.\Generated_Source\PSoC4/ADC.c ****     }
 524:.\Generated_Source\PSoC4/ADC.c **** 
 525:.\Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 643              		.loc 1 525 0
 644 0032 FB68     		ldr	r3, [r7, #12]
 645 0034 9BB2     		uxth	r3, r3
 646 0036 1BB2     		sxth	r3, r3
 526:.\Generated_Source\PSoC4/ADC.c **** }
 647              		.loc 1 526 0
 648 0038 181C     		mov	r0, r3
 649 003a BD46     		mov	sp, r7
 650 003c 04B0     		add	sp, sp, #16
 651              		@ sp needed
 652 003e 80BD     		pop	{r7, pc}
 653              	.L45:
 654              		.align	2
 655              	.L44:
 656 0040 80013A40 		.word	1077543296
 657              		.cfi_endproc
 658              	.LFE9:
 659              		.size	ADC_GetResult16, .-ADC_GetResult16
 660              		.section	.text.ADC_SetChanMask,"ax",%progbits
 661              		.align	2
 662              		.global	ADC_SetChanMask
 663              		.code	16
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 22


 664              		.thumb_func
 665              		.type	ADC_SetChanMask, %function
 666              	ADC_SetChanMask:
 667              	.LFB10:
 527:.\Generated_Source\PSoC4/ADC.c **** 
 528:.\Generated_Source\PSoC4/ADC.c **** 
 529:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 530:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 531:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 532:.\Generated_Source\PSoC4/ADC.c **** *
 533:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 534:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 535:.\Generated_Source\PSoC4/ADC.c **** *
 536:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 537:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 538:.\Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:.\Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:.\Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:.\Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 542:.\Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 543:.\Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:.\Generated_Source\PSoC4/ADC.c **** *
 545:.\Generated_Source\PSoC4/ADC.c **** * Return:
 546:.\Generated_Source\PSoC4/ADC.c **** *  None.
 547:.\Generated_Source\PSoC4/ADC.c **** *
 548:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 549:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 550:.\Generated_Source\PSoC4/ADC.c **** {
 668              		.loc 1 550 0
 669              		.cfi_startproc
 670 0000 80B5     		push	{r7, lr}
 671              		.cfi_def_cfa_offset 8
 672              		.cfi_offset 7, -8
 673              		.cfi_offset 14, -4
 674 0002 82B0     		sub	sp, sp, #8
 675              		.cfi_def_cfa_offset 16
 676 0004 00AF     		add	r7, sp, #0
 677              		.cfi_def_cfa_register 7
 678 0006 7860     		str	r0, [r7, #4]
 551:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 679              		.loc 1 551 0
 680 0008 034B     		ldr	r3, .L47
 681 000a 7A68     		ldr	r2, [r7, #4]
 682 000c 0321     		mov	r1, #3
 683 000e 0A40     		and	r2, r1
 684 0010 1A60     		str	r2, [r3]
 552:.\Generated_Source\PSoC4/ADC.c **** }
 685              		.loc 1 552 0
 686 0012 BD46     		mov	sp, r7
 687 0014 02B0     		add	sp, sp, #8
 688              		@ sp needed
 689 0016 80BD     		pop	{r7, pc}
 690              	.L48:
 691              		.align	2
 692              	.L47:
 693 0018 20003A40 		.word	1077542944
 694              		.cfi_endproc
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 23


 695              	.LFE10:
 696              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 697              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 698              		.align	2
 699              		.global	ADC_SetLowLimit
 700              		.code	16
 701              		.thumb_func
 702              		.type	ADC_SetLowLimit, %function
 703              	ADC_SetLowLimit:
 704              	.LFB11:
 553:.\Generated_Source\PSoC4/ADC.c **** 
 554:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 555:.\Generated_Source\PSoC4/ADC.c **** 
 556:.\Generated_Source\PSoC4/ADC.c **** 
 557:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 558:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 559:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 560:.\Generated_Source\PSoC4/ADC.c ****     *
 561:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 562:.\Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 563:.\Generated_Source\PSoC4/ADC.c ****     *
 564:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 565:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 566:.\Generated_Source\PSoC4/ADC.c ****     *
 567:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 568:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 569:.\Generated_Source\PSoC4/ADC.c ****     *
 570:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 571:.\Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 572:.\Generated_Source\PSoC4/ADC.c ****     {
 573:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 574:.\Generated_Source\PSoC4/ADC.c ****     }
 575:.\Generated_Source\PSoC4/ADC.c **** 
 576:.\Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 577:.\Generated_Source\PSoC4/ADC.c **** 
 578:.\Generated_Source\PSoC4/ADC.c **** 
 579:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 580:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 581:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 582:.\Generated_Source\PSoC4/ADC.c **** *
 583:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 584:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 585:.\Generated_Source\PSoC4/ADC.c **** *
 586:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 587:.\Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 588:.\Generated_Source\PSoC4/ADC.c **** *
 589:.\Generated_Source\PSoC4/ADC.c **** * Return:
 590:.\Generated_Source\PSoC4/ADC.c **** *  None.
 591:.\Generated_Source\PSoC4/ADC.c **** *
 592:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 593:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 594:.\Generated_Source\PSoC4/ADC.c **** {
 705              		.loc 1 594 0
 706              		.cfi_startproc
 707 0000 80B5     		push	{r7, lr}
 708              		.cfi_def_cfa_offset 8
 709              		.cfi_offset 7, -8
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 24


 710              		.cfi_offset 14, -4
 711 0002 82B0     		sub	sp, sp, #8
 712              		.cfi_def_cfa_offset 16
 713 0004 00AF     		add	r7, sp, #0
 714              		.cfi_def_cfa_register 7
 715 0006 7860     		str	r0, [r7, #4]
 595:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 716              		.loc 1 595 0
 717 0008 084B     		ldr	r3, .L50
 718 000a 084A     		ldr	r2, .L50
 719 000c 1268     		ldr	r2, [r2]
 720 000e 120C     		lsr	r2, r2, #16
 721 0010 1204     		lsl	r2, r2, #16
 722 0012 1A60     		str	r2, [r3]
 596:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 723              		.loc 1 596 0
 724 0014 054B     		ldr	r3, .L50
 725 0016 054A     		ldr	r2, .L50
 726 0018 1168     		ldr	r1, [r2]
 727 001a 7A68     		ldr	r2, [r7, #4]
 728 001c 1204     		lsl	r2, r2, #16
 729 001e 120C     		lsr	r2, r2, #16
 730 0020 0A43     		orr	r2, r1
 731 0022 1A60     		str	r2, [r3]
 597:.\Generated_Source\PSoC4/ADC.c **** }
 732              		.loc 1 597 0
 733 0024 BD46     		mov	sp, r7
 734 0026 02B0     		add	sp, sp, #8
 735              		@ sp needed
 736 0028 80BD     		pop	{r7, pc}
 737              	.L51:
 738 002a C046     		.align	2
 739              	.L50:
 740 002c 18003A40 		.word	1077542936
 741              		.cfi_endproc
 742              	.LFE11:
 743              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 744              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 745              		.align	2
 746              		.global	ADC_SetHighLimit
 747              		.code	16
 748              		.thumb_func
 749              		.type	ADC_SetHighLimit, %function
 750              	ADC_SetHighLimit:
 751              	.LFB12:
 598:.\Generated_Source\PSoC4/ADC.c **** 
 599:.\Generated_Source\PSoC4/ADC.c **** 
 600:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 601:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 602:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 603:.\Generated_Source\PSoC4/ADC.c **** *
 604:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 605:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 606:.\Generated_Source\PSoC4/ADC.c **** *
 607:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 608:.\Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 609:.\Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 25


 610:.\Generated_Source\PSoC4/ADC.c **** * Return:
 611:.\Generated_Source\PSoC4/ADC.c **** *  None.
 612:.\Generated_Source\PSoC4/ADC.c **** *
 613:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 614:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 615:.\Generated_Source\PSoC4/ADC.c **** {
 752              		.loc 1 615 0
 753              		.cfi_startproc
 754 0000 80B5     		push	{r7, lr}
 755              		.cfi_def_cfa_offset 8
 756              		.cfi_offset 7, -8
 757              		.cfi_offset 14, -4
 758 0002 82B0     		sub	sp, sp, #8
 759              		.cfi_def_cfa_offset 16
 760 0004 00AF     		add	r7, sp, #0
 761              		.cfi_def_cfa_register 7
 762 0006 7860     		str	r0, [r7, #4]
 616:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 763              		.loc 1 616 0
 764 0008 074B     		ldr	r3, .L53
 765 000a 074A     		ldr	r2, .L53
 766 000c 1268     		ldr	r2, [r2]
 767 000e 1204     		lsl	r2, r2, #16
 768 0010 120C     		lsr	r2, r2, #16
 769 0012 1A60     		str	r2, [r3]
 617:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 770              		.loc 1 617 0
 771 0014 044B     		ldr	r3, .L53
 772 0016 044A     		ldr	r2, .L53
 773 0018 1168     		ldr	r1, [r2]
 774 001a 7A68     		ldr	r2, [r7, #4]
 775 001c 1204     		lsl	r2, r2, #16
 776 001e 0A43     		orr	r2, r1
 777 0020 1A60     		str	r2, [r3]
 618:.\Generated_Source\PSoC4/ADC.c **** }
 778              		.loc 1 618 0
 779 0022 BD46     		mov	sp, r7
 780 0024 02B0     		add	sp, sp, #8
 781              		@ sp needed
 782 0026 80BD     		pop	{r7, pc}
 783              	.L54:
 784              		.align	2
 785              	.L53:
 786 0028 18003A40 		.word	1077542936
 787              		.cfi_endproc
 788              	.LFE12:
 789              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 790              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 791              		.align	2
 792              		.global	ADC_SetLimitMask
 793              		.code	16
 794              		.thumb_func
 795              		.type	ADC_SetLimitMask, %function
 796              	ADC_SetLimitMask:
 797              	.LFB13:
 619:.\Generated_Source\PSoC4/ADC.c **** 
 620:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 26


 621:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 622:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 623:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 624:.\Generated_Source\PSoC4/ADC.c **** *
 625:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 626:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 627:.\Generated_Source\PSoC4/ADC.c **** *
 628:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 629:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 630:.\Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:.\Generated_Source\PSoC4/ADC.c **** *
 634:.\Generated_Source\PSoC4/ADC.c **** * Return:
 635:.\Generated_Source\PSoC4/ADC.c **** *  None.
 636:.\Generated_Source\PSoC4/ADC.c **** *
 637:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 638:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 639:.\Generated_Source\PSoC4/ADC.c **** {
 798              		.loc 1 639 0
 799              		.cfi_startproc
 800 0000 80B5     		push	{r7, lr}
 801              		.cfi_def_cfa_offset 8
 802              		.cfi_offset 7, -8
 803              		.cfi_offset 14, -4
 804 0002 82B0     		sub	sp, sp, #8
 805              		.cfi_def_cfa_offset 16
 806 0004 00AF     		add	r7, sp, #0
 807              		.cfi_def_cfa_register 7
 808 0006 7860     		str	r0, [r7, #4]
 640:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 809              		.loc 1 640 0
 810 0008 034B     		ldr	r3, .L56
 811 000a 7A68     		ldr	r2, [r7, #4]
 812 000c 0321     		mov	r1, #3
 813 000e 0A40     		and	r2, r1
 814 0010 1A60     		str	r2, [r3]
 641:.\Generated_Source\PSoC4/ADC.c **** }
 815              		.loc 1 641 0
 816 0012 BD46     		mov	sp, r7
 817 0014 02B0     		add	sp, sp, #8
 818              		@ sp needed
 819 0016 80BD     		pop	{r7, pc}
 820              	.L57:
 821              		.align	2
 822              	.L56:
 823 0018 38023A40 		.word	1077543480
 824              		.cfi_endproc
 825              	.LFE13:
 826              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 827              		.section	.text.ADC_SetSatMask,"ax",%progbits
 828              		.align	2
 829              		.global	ADC_SetSatMask
 830              		.code	16
 831              		.thumb_func
 832              		.type	ADC_SetSatMask, %function
 833              	ADC_SetSatMask:
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 27


 834              	.LFB14:
 642:.\Generated_Source\PSoC4/ADC.c **** 
 643:.\Generated_Source\PSoC4/ADC.c **** 
 644:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 645:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 646:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 647:.\Generated_Source\PSoC4/ADC.c **** *
 648:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 649:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 650:.\Generated_Source\PSoC4/ADC.c **** *
 651:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 652:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 653:.\Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:.\Generated_Source\PSoC4/ADC.c **** *
 657:.\Generated_Source\PSoC4/ADC.c **** * Return:
 658:.\Generated_Source\PSoC4/ADC.c **** *  None.
 659:.\Generated_Source\PSoC4/ADC.c **** *
 660:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 661:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 662:.\Generated_Source\PSoC4/ADC.c **** {
 835              		.loc 1 662 0
 836              		.cfi_startproc
 837 0000 80B5     		push	{r7, lr}
 838              		.cfi_def_cfa_offset 8
 839              		.cfi_offset 7, -8
 840              		.cfi_offset 14, -4
 841 0002 82B0     		sub	sp, sp, #8
 842              		.cfi_def_cfa_offset 16
 843 0004 00AF     		add	r7, sp, #0
 844              		.cfi_def_cfa_register 7
 845 0006 7860     		str	r0, [r7, #4]
 663:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 846              		.loc 1 663 0
 847 0008 034B     		ldr	r3, .L59
 848 000a 7A68     		ldr	r2, [r7, #4]
 849 000c 0321     		mov	r1, #3
 850 000e 0A40     		and	r2, r1
 851 0010 1A60     		str	r2, [r3]
 664:.\Generated_Source\PSoC4/ADC.c **** }
 852              		.loc 1 664 0
 853 0012 BD46     		mov	sp, r7
 854 0014 02B0     		add	sp, sp, #8
 855              		@ sp needed
 856 0016 80BD     		pop	{r7, pc}
 857              	.L60:
 858              		.align	2
 859              	.L59:
 860 0018 28023A40 		.word	1077543464
 861              		.cfi_endproc
 862              	.LFE14:
 863              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 864              		.section	.text.ADC_SetOffset,"ax",%progbits
 865              		.align	2
 866              		.global	ADC_SetOffset
 867              		.code	16
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 28


 868              		.thumb_func
 869              		.type	ADC_SetOffset, %function
 870              	ADC_SetOffset:
 871              	.LFB15:
 665:.\Generated_Source\PSoC4/ADC.c **** 
 666:.\Generated_Source\PSoC4/ADC.c **** 
 667:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 668:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 669:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 670:.\Generated_Source\PSoC4/ADC.c **** *
 671:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 672:.\Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 673:.\Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:.\Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 675:.\Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 676:.\Generated_Source\PSoC4/ADC.c **** *
 677:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 678:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 679:.\Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 680:.\Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 681:.\Generated_Source\PSoC4/ADC.c **** *
 682:.\Generated_Source\PSoC4/ADC.c **** * Return:
 683:.\Generated_Source\PSoC4/ADC.c **** *  None.
 684:.\Generated_Source\PSoC4/ADC.c **** *
 685:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 686:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 687:.\Generated_Source\PSoC4/ADC.c **** *
 688:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 689:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 690:.\Generated_Source\PSoC4/ADC.c **** {
 872              		.loc 1 690 0
 873              		.cfi_startproc
 874 0000 80B5     		push	{r7, lr}
 875              		.cfi_def_cfa_offset 8
 876              		.cfi_offset 7, -8
 877              		.cfi_offset 14, -4
 878 0002 82B0     		sub	sp, sp, #8
 879              		.cfi_def_cfa_offset 16
 880 0004 00AF     		add	r7, sp, #0
 881              		.cfi_def_cfa_register 7
 882 0006 7860     		str	r0, [r7, #4]
 883 0008 0A1C     		mov	r2, r1
 884 000a BB1C     		add	r3, r7, #2
 885 000c 1A80     		strh	r2, [r3]
 691:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 886              		.loc 1 692 0
 887 000e 7B68     		ldr	r3, [r7, #4]
 888 0010 012B     		cmp	r3, #1
 889 0012 02D9     		bls	.L62
 890              		.loc 1 692 0 is_stmt 0 discriminator 1
 891 0014 0020     		mov	r0, #0
 892 0016 FFF7FEFF 		bl	CyHalt
 893              	.L62:
 693:.\Generated_Source\PSoC4/ADC.c **** 
 694:.\Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 894              		.loc 1 694 0 is_stmt 1
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 29


 895 001a 044B     		ldr	r3, .L63
 896 001c 7A68     		ldr	r2, [r7, #4]
 897 001e 5200     		lsl	r2, r2, #1
 898 0020 B91C     		add	r1, r7, #2
 899 0022 0988     		ldrh	r1, [r1]
 900 0024 D152     		strh	r1, [r2, r3]
 695:.\Generated_Source\PSoC4/ADC.c **** }
 901              		.loc 1 695 0
 902 0026 BD46     		mov	sp, r7
 903 0028 02B0     		add	sp, sp, #8
 904              		@ sp needed
 905 002a 80BD     		pop	{r7, pc}
 906              	.L64:
 907              		.align	2
 908              	.L63:
 909 002c 00000000 		.word	ADC_offset
 910              		.cfi_endproc
 911              	.LFE15:
 912              		.size	ADC_SetOffset, .-ADC_SetOffset
 913              		.section	.text.ADC_SetGain,"ax",%progbits
 914              		.align	2
 915              		.global	ADC_SetGain
 916              		.code	16
 917              		.thumb_func
 918              		.type	ADC_SetGain, %function
 919              	ADC_SetGain:
 920              	.LFB16:
 696:.\Generated_Source\PSoC4/ADC.c **** 
 697:.\Generated_Source\PSoC4/ADC.c **** 
 698:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 699:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 700:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 701:.\Generated_Source\PSoC4/ADC.c **** *
 702:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 703:.\Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:.\Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 705:.\Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 706:.\Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 707:.\Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:.\Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:.\Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 710:.\Generated_Source\PSoC4/ADC.c **** *
 711:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 712:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 713:.\Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:.\Generated_Source\PSoC4/ADC.c **** *
 715:.\Generated_Source\PSoC4/ADC.c **** * Return:
 716:.\Generated_Source\PSoC4/ADC.c **** *  None.
 717:.\Generated_Source\PSoC4/ADC.c **** *
 718:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 719:.\Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 720:.\Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 721:.\Generated_Source\PSoC4/ADC.c **** *
 722:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 723:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 724:.\Generated_Source\PSoC4/ADC.c **** {
 921              		.loc 1 724 0
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 30


 922              		.cfi_startproc
 923 0000 80B5     		push	{r7, lr}
 924              		.cfi_def_cfa_offset 8
 925              		.cfi_offset 7, -8
 926              		.cfi_offset 14, -4
 927 0002 82B0     		sub	sp, sp, #8
 928              		.cfi_def_cfa_offset 16
 929 0004 00AF     		add	r7, sp, #0
 930              		.cfi_def_cfa_register 7
 931 0006 7860     		str	r0, [r7, #4]
 932 0008 3960     		str	r1, [r7]
 725:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 933              		.loc 1 726 0
 934 000a 7B68     		ldr	r3, [r7, #4]
 935 000c 012B     		cmp	r3, #1
 936 000e 02D9     		bls	.L66
 937              		.loc 1 726 0 is_stmt 0 discriminator 1
 938 0010 0020     		mov	r0, #0
 939 0012 FFF7FEFF 		bl	CyHalt
 940              	.L66:
 727:.\Generated_Source\PSoC4/ADC.c **** 
 728:.\Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 941              		.loc 1 728 0 is_stmt 1
 942 0016 044B     		ldr	r3, .L67
 943 0018 7A68     		ldr	r2, [r7, #4]
 944 001a 9200     		lsl	r2, r2, #2
 945 001c 3968     		ldr	r1, [r7]
 946 001e D150     		str	r1, [r2, r3]
 729:.\Generated_Source\PSoC4/ADC.c **** }
 947              		.loc 1 729 0
 948 0020 BD46     		mov	sp, r7
 949 0022 02B0     		add	sp, sp, #8
 950              		@ sp needed
 951 0024 80BD     		pop	{r7, pc}
 952              	.L68:
 953 0026 C046     		.align	2
 954              	.L67:
 955 0028 00000000 		.word	ADC_countsPer10Volt
 956              		.cfi_endproc
 957              	.LFE16:
 958              		.size	ADC_SetGain, .-ADC_SetGain
 959              		.global	__aeabi_idiv
 960              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 961              		.align	2
 962              		.global	ADC_CountsTo_mVolts
 963              		.code	16
 964              		.thumb_func
 965              		.type	ADC_CountsTo_mVolts, %function
 966              	ADC_CountsTo_mVolts:
 967              	.LFB17:
 730:.\Generated_Source\PSoC4/ADC.c **** 
 731:.\Generated_Source\PSoC4/ADC.c **** 
 732:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 733:.\Generated_Source\PSoC4/ADC.c **** 
 734:.\Generated_Source\PSoC4/ADC.c **** 
 735:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 31


 736:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 737:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 738:.\Generated_Source\PSoC4/ADC.c ****     *
 739:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 740:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 741:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 742:.\Generated_Source\PSoC4/ADC.c ****     *
 743:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 744:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 745:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 746:.\Generated_Source\PSoC4/ADC.c ****     *
 747:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 748:.\Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 749:.\Generated_Source\PSoC4/ADC.c ****     *
 750:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 751:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 753:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 754:.\Generated_Source\PSoC4/ADC.c ****     *
 755:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 756:.\Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:.\Generated_Source\PSoC4/ADC.c ****     {
 968              		.loc 1 757 0
 969              		.cfi_startproc
 970 0000 80B5     		push	{r7, lr}
 971              		.cfi_def_cfa_offset 8
 972              		.cfi_offset 7, -8
 973              		.cfi_offset 14, -4
 974 0002 84B0     		sub	sp, sp, #16
 975              		.cfi_def_cfa_offset 24
 976 0004 00AF     		add	r7, sp, #0
 977              		.cfi_def_cfa_register 7
 978 0006 7860     		str	r0, [r7, #4]
 979 0008 0A1C     		mov	r2, r1
 980 000a BB1C     		add	r3, r7, #2
 981 000c 1A80     		strh	r2, [r3]
 758:.\Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 759:.\Generated_Source\PSoC4/ADC.c **** 
 760:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 982              		.loc 1 761 0
 983 000e 7B68     		ldr	r3, [r7, #4]
 984 0010 012B     		cmp	r3, #1
 985 0012 02D9     		bls	.L70
 986              		.loc 1 761 0 is_stmt 0 discriminator 1
 987 0014 0020     		mov	r0, #0
 988 0016 FFF7FEFF 		bl	CyHalt
 989              	.L70:
 762:.\Generated_Source\PSoC4/ADC.c **** 
 763:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 765:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 766:.\Generated_Source\PSoC4/ADC.c ****             {
 767:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 768:.\Generated_Source\PSoC4/ADC.c ****             }
 769:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 770:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 32


 771:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 772:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 990              		.loc 1 772 0 is_stmt 1
 991 001a 1F4B     		ldr	r3, .L76
 992 001c 7A68     		ldr	r2, [r7, #4]
 993 001e 5200     		lsl	r2, r2, #1
 994 0020 D35A     		ldrh	r3, [r2, r3]
 995 0022 99B2     		uxth	r1, r3
 996 0024 BB1C     		add	r3, r7, #2
 997 0026 1A88     		ldrh	r2, [r3]
 998 0028 8BB2     		uxth	r3, r1
 999 002a D31A     		sub	r3, r2, r3
 1000 002c 9AB2     		uxth	r2, r3
 1001 002e BB1C     		add	r3, r7, #2
 1002 0030 1A80     		strh	r2, [r3]
 773:.\Generated_Source\PSoC4/ADC.c **** 
 774:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1003              		.loc 1 774 0
 1004 0032 BB1C     		add	r3, r7, #2
 1005 0034 0022     		mov	r2, #0
 1006 0036 9B5E     		ldrsh	r3, [r3, r2]
 1007 0038 184A     		ldr	r2, .L76+4
 1008 003a 5A43     		mul	r2, r3
 775:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1009              		.loc 1 775 0
 1010 003c BB1C     		add	r3, r7, #2
 1011 003e 0021     		mov	r1, #0
 1012 0040 5B5E     		ldrsh	r3, [r3, r1]
 1013 0042 002B     		cmp	r3, #0
 1014 0044 08DD     		ble	.L71
 1015              		.loc 1 775 0 is_stmt 0 discriminator 1
 1016 0046 164B     		ldr	r3, .L76+8
 1017 0048 7968     		ldr	r1, [r7, #4]
 1018 004a 8900     		lsl	r1, r1, #2
 1019 004c CB58     		ldr	r3, [r1, r3]
 1020 004e 002B     		cmp	r3, #0
 1021 0050 00DA     		bge	.L72
 1022 0052 0133     		add	r3, r3, #1
 1023              	.L72:
 1024 0054 5B10     		asr	r3, r3, #1
 1025 0056 08E0     		b	.L73
 1026              	.L71:
 1027              		.loc 1 775 0 discriminator 2
 1028 0058 114B     		ldr	r3, .L76+8
 1029 005a 7968     		ldr	r1, [r7, #4]
 1030 005c 8900     		lsl	r1, r1, #2
 1031 005e CB58     		ldr	r3, [r1, r3]
 1032 0060 002B     		cmp	r3, #0
 1033 0062 00DA     		bge	.L74
 1034 0064 0133     		add	r3, r3, #1
 1035              	.L74:
 1036 0066 5B10     		asr	r3, r3, #1
 1037 0068 5B42     		neg	r3, r3
 1038              	.L73:
 774:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1039              		.loc 1 774 0 is_stmt 1
 1040 006a D118     		add	r1, r2, r3
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 33


 776:.\Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 1041              		.loc 1 776 0
 1042 006c 0C4B     		ldr	r3, .L76+8
 1043 006e 7A68     		ldr	r2, [r7, #4]
 1044 0070 9200     		lsl	r2, r2, #2
 1045 0072 D358     		ldr	r3, [r2, r3]
 1046 0074 081C     		mov	r0, r1
 1047 0076 191C     		mov	r1, r3
 1048 0078 FFF7FEFF 		bl	__aeabi_idiv
 1049 007c 031C     		mov	r3, r0
 1050 007e 1A1C     		mov	r2, r3
 774:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1051              		.loc 1 774 0
 1052 0080 0E23     		mov	r3, #14
 1053 0082 FB18     		add	r3, r7, r3
 1054 0084 1A80     		strh	r2, [r3]
 777:.\Generated_Source\PSoC4/ADC.c **** 
 778:.\Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1055              		.loc 1 778 0
 1056 0086 0E23     		mov	r3, #14
 1057 0088 FB18     		add	r3, r7, r3
 1058 008a 1B88     		ldrh	r3, [r3]
 1059 008c 1BB2     		sxth	r3, r3
 779:.\Generated_Source\PSoC4/ADC.c ****     }
 1060              		.loc 1 779 0
 1061 008e 181C     		mov	r0, r3
 1062 0090 BD46     		mov	sp, r7
 1063 0092 04B0     		add	sp, sp, #16
 1064              		@ sp needed
 1065 0094 80BD     		pop	{r7, pc}
 1066              	.L77:
 1067 0096 C046     		.align	2
 1068              	.L76:
 1069 0098 00000000 		.word	ADC_offset
 1070 009c 10270000 		.word	10000
 1071 00a0 00000000 		.word	ADC_countsPer10Volt
 1072              		.cfi_endproc
 1073              	.LFE17:
 1074              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1075              		.global	__aeabi_lmul
 1076              		.global	__aeabi_ldivmod
 1077              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1078              		.align	2
 1079              		.global	ADC_CountsTo_uVolts
 1080              		.code	16
 1081              		.thumb_func
 1082              		.type	ADC_CountsTo_uVolts, %function
 1083              	ADC_CountsTo_uVolts:
 1084              	.LFB18:
 780:.\Generated_Source\PSoC4/ADC.c **** 
 781:.\Generated_Source\PSoC4/ADC.c **** 
 782:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 783:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 784:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 785:.\Generated_Source\PSoC4/ADC.c ****     *
 786:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 787:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 34


 788:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 789:.\Generated_Source\PSoC4/ADC.c ****     *
 790:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 791:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 792:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 793:.\Generated_Source\PSoC4/ADC.c ****     *
 794:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 795:.\Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 796:.\Generated_Source\PSoC4/ADC.c ****     *
 797:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 798:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 800:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 801:.\Generated_Source\PSoC4/ADC.c ****     *
 802:.\Generated_Source\PSoC4/ADC.c ****     * Theory:
 803:.\Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:.\Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:.\Generated_Source\PSoC4/ADC.c ****     *  resolution.
 806:.\Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:.\Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:.\Generated_Source\PSoC4/ADC.c ****     *
 809:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 810:.\Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:.\Generated_Source\PSoC4/ADC.c ****     {
 1085              		.loc 1 811 0
 1086              		.cfi_startproc
 1087 0000 B0B5     		push	{r4, r5, r7, lr}
 1088              		.cfi_def_cfa_offset 16
 1089              		.cfi_offset 4, -16
 1090              		.cfi_offset 5, -12
 1091              		.cfi_offset 7, -8
 1092              		.cfi_offset 14, -4
 1093 0002 86B0     		sub	sp, sp, #24
 1094              		.cfi_def_cfa_offset 40
 1095 0004 00AF     		add	r7, sp, #0
 1096              		.cfi_def_cfa_register 7
 1097 0006 F860     		str	r0, [r7, #12]
 1098 0008 0A1C     		mov	r2, r1
 1099 000a 0A23     		mov	r3, #10
 1100 000c FB18     		add	r3, r7, r3
 1101 000e 1A80     		strh	r2, [r3]
 812:.\Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 813:.\Generated_Source\PSoC4/ADC.c **** 
 814:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1102              		.loc 1 815 0
 1103 0010 FB68     		ldr	r3, [r7, #12]
 1104 0012 012B     		cmp	r3, #1
 1105 0014 02D9     		bls	.L79
 1106              		.loc 1 815 0 is_stmt 0 discriminator 1
 1107 0016 0020     		mov	r0, #0
 1108 0018 FFF7FEFF 		bl	CyHalt
 1109              	.L79:
 816:.\Generated_Source\PSoC4/ADC.c **** 
 817:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 819:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 35


 820:.\Generated_Source\PSoC4/ADC.c ****             {
 821:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 822:.\Generated_Source\PSoC4/ADC.c ****             }
 823:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 824:.\Generated_Source\PSoC4/ADC.c **** 
 825:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 826:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1110              		.loc 1 826 0 is_stmt 1
 1111 001c 194B     		ldr	r3, .L81
 1112 001e FA68     		ldr	r2, [r7, #12]
 1113 0020 5200     		lsl	r2, r2, #1
 1114 0022 D35A     		ldrh	r3, [r2, r3]
 1115 0024 99B2     		uxth	r1, r3
 1116 0026 0A23     		mov	r3, #10
 1117 0028 FB18     		add	r3, r7, r3
 1118 002a 1A88     		ldrh	r2, [r3]
 1119 002c 8BB2     		uxth	r3, r1
 1120 002e D31A     		sub	r3, r2, r3
 1121 0030 9AB2     		uxth	r2, r3
 1122 0032 0A23     		mov	r3, #10
 1123 0034 FB18     		add	r3, r7, r3
 1124 0036 1A80     		strh	r2, [r3]
 827:.\Generated_Source\PSoC4/ADC.c **** 
 828:.\Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1125              		.loc 1 828 0
 1126 0038 0A23     		mov	r3, #10
 1127 003a FB18     		add	r3, r7, r3
 1128 003c 1B88     		ldrh	r3, [r3]
 1129 003e 1BB2     		sxth	r3, r3
 1130 0040 3B60     		str	r3, [r7]
 1131 0042 DB17     		asr	r3, r3, #31
 1132 0044 7B60     		str	r3, [r7, #4]
 1133 0046 3868     		ldr	r0, [r7]
 1134 0048 7968     		ldr	r1, [r7, #4]
 1135 004a 0F4A     		ldr	r2, .L81+4
 1136 004c 0023     		mov	r3, #0
 1137 004e FFF7FEFF 		bl	__aeabi_lmul
 1138 0052 021C     		mov	r2, r0
 1139 0054 0B1C     		mov	r3, r1
 1140 0056 101C     		mov	r0, r2
 1141 0058 191C     		mov	r1, r3
 1142 005a 0C4B     		ldr	r3, .L81+8
 1143 005c FA68     		ldr	r2, [r7, #12]
 1144 005e 9200     		lsl	r2, r2, #2
 1145 0060 D358     		ldr	r3, [r2, r3]
 1146 0062 1C1C     		mov	r4, r3
 1147 0064 DB17     		asr	r3, r3, #31
 1148 0066 1D1C     		mov	r5, r3
 1149 0068 221C     		mov	r2, r4
 1150 006a 2B1C     		mov	r3, r5
 1151 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1152 0070 031C     		mov	r3, r0
 1153 0072 0C1C     		mov	r4, r1
 1154 0074 3B61     		str	r3, [r7, #16]
 1155 0076 7C61     		str	r4, [r7, #20]
 829:.\Generated_Source\PSoC4/ADC.c **** 
 830:.\Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 36


 1156              		.loc 1 830 0
 1157 0078 3B69     		ldr	r3, [r7, #16]
 831:.\Generated_Source\PSoC4/ADC.c ****     }
 1158              		.loc 1 831 0
 1159 007a 181C     		mov	r0, r3
 1160 007c BD46     		mov	sp, r7
 1161 007e 06B0     		add	sp, sp, #24
 1162              		@ sp needed
 1163 0080 B0BD     		pop	{r4, r5, r7, pc}
 1164              	.L82:
 1165 0082 C046     		.align	2
 1166              	.L81:
 1167 0084 00000000 		.word	ADC_offset
 1168 0088 80969800 		.word	10000000
 1169 008c 00000000 		.word	ADC_countsPer10Volt
 1170              		.cfi_endproc
 1171              	.LFE18:
 1172              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1173              		.global	__aeabi_i2f
 1174              		.global	__aeabi_fmul
 1175              		.global	__aeabi_fdiv
 1176              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1177              		.align	2
 1178              		.global	ADC_CountsTo_Volts
 1179              		.code	16
 1180              		.thumb_func
 1181              		.type	ADC_CountsTo_Volts, %function
 1182              	ADC_CountsTo_Volts:
 1183              	.LFB19:
 832:.\Generated_Source\PSoC4/ADC.c **** 
 833:.\Generated_Source\PSoC4/ADC.c **** 
 834:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 835:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 836:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 837:.\Generated_Source\PSoC4/ADC.c ****     *
 838:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 839:.\Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 841:.\Generated_Source\PSoC4/ADC.c ****     *
 842:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 843:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 844:.\Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 845:.\Generated_Source\PSoC4/ADC.c ****     *
 846:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 847:.\Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 848:.\Generated_Source\PSoC4/ADC.c ****     *
 849:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 850:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 851:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 852:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 853:.\Generated_Source\PSoC4/ADC.c ****     *
 854:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 855:.\Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:.\Generated_Source\PSoC4/ADC.c ****     {
 1184              		.loc 1 856 0
 1185              		.cfi_startproc
 1186 0000 90B5     		push	{r4, r7, lr}
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 37


 1187              		.cfi_def_cfa_offset 12
 1188              		.cfi_offset 4, -12
 1189              		.cfi_offset 7, -8
 1190              		.cfi_offset 14, -4
 1191 0002 85B0     		sub	sp, sp, #20
 1192              		.cfi_def_cfa_offset 32
 1193 0004 00AF     		add	r7, sp, #0
 1194              		.cfi_def_cfa_register 7
 1195 0006 7860     		str	r0, [r7, #4]
 1196 0008 0A1C     		mov	r2, r1
 1197 000a BB1C     		add	r3, r7, #2
 1198 000c 1A80     		strh	r2, [r3]
 857:.\Generated_Source\PSoC4/ADC.c ****         float32 volts;
 858:.\Generated_Source\PSoC4/ADC.c **** 
 859:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1199              		.loc 1 860 0
 1200 000e 7B68     		ldr	r3, [r7, #4]
 1201 0010 012B     		cmp	r3, #1
 1202 0012 02D9     		bls	.L84
 1203              		.loc 1 860 0 is_stmt 0 discriminator 1
 1204 0014 0020     		mov	r0, #0
 1205 0016 FFF7FEFF 		bl	CyHalt
 1206              	.L84:
 861:.\Generated_Source\PSoC4/ADC.c **** 
 862:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 864:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 865:.\Generated_Source\PSoC4/ADC.c ****             {
 866:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 867:.\Generated_Source\PSoC4/ADC.c ****             }
 868:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 869:.\Generated_Source\PSoC4/ADC.c **** 
 870:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 871:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1207              		.loc 1 871 0 is_stmt 1
 1208 001a 164B     		ldr	r3, .L86
 1209 001c 7A68     		ldr	r2, [r7, #4]
 1210 001e 5200     		lsl	r2, r2, #1
 1211 0020 D35A     		ldrh	r3, [r2, r3]
 1212 0022 99B2     		uxth	r1, r3
 1213 0024 BB1C     		add	r3, r7, #2
 1214 0026 1A88     		ldrh	r2, [r3]
 1215 0028 8BB2     		uxth	r3, r1
 1216 002a D31A     		sub	r3, r2, r3
 1217 002c 9AB2     		uxth	r2, r3
 1218 002e BB1C     		add	r3, r7, #2
 1219 0030 1A80     		strh	r2, [r3]
 872:.\Generated_Source\PSoC4/ADC.c **** 
 873:.\Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1220              		.loc 1 873 0
 1221 0032 BB1C     		add	r3, r7, #2
 1222 0034 0022     		mov	r2, #0
 1223 0036 9B5E     		ldrsh	r3, [r3, r2]
 1224 0038 181C     		mov	r0, r3
 1225 003a FFF7FEFF 		bl	__aeabi_i2f
 1226 003e 031C     		add	r3, r0, #0
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 38


 1227 0040 181C     		add	r0, r3, #0
 1228 0042 0D49     		ldr	r1, .L86+4
 1229 0044 FFF7FEFF 		bl	__aeabi_fmul
 1230 0048 031C     		add	r3, r0, #0
 1231 004a 1C1C     		add	r4, r3, #0
 1232 004c 0B4B     		ldr	r3, .L86+8
 1233 004e 7A68     		ldr	r2, [r7, #4]
 1234 0050 9200     		lsl	r2, r2, #2
 1235 0052 D358     		ldr	r3, [r2, r3]
 1236 0054 181C     		mov	r0, r3
 1237 0056 FFF7FEFF 		bl	__aeabi_i2f
 1238 005a 031C     		add	r3, r0, #0
 1239 005c 201C     		add	r0, r4, #0
 1240 005e 191C     		add	r1, r3, #0
 1241 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1242 0064 031C     		add	r3, r0, #0
 1243 0066 FB60     		str	r3, [r7, #12]
 874:.\Generated_Source\PSoC4/ADC.c **** 
 875:.\Generated_Source\PSoC4/ADC.c ****         return( volts );
 1244              		.loc 1 875 0
 1245 0068 FB68     		ldr	r3, [r7, #12]
 876:.\Generated_Source\PSoC4/ADC.c ****     }
 1246              		.loc 1 876 0
 1247 006a 181C     		add	r0, r3, #0
 1248 006c BD46     		mov	sp, r7
 1249 006e 05B0     		add	sp, sp, #20
 1250              		@ sp needed
 1251 0070 90BD     		pop	{r4, r7, pc}
 1252              	.L87:
 1253 0072 C046     		.align	2
 1254              	.L86:
 1255 0074 00000000 		.word	ADC_offset
 1256 0078 00002041 		.word	1092616192
 1257 007c 00000000 		.word	ADC_countsPer10Volt
 1258              		.cfi_endproc
 1259              	.LFE19:
 1260              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1261              		.section	.rodata
 1262              		.align	2
 1263              		.type	ADC_InputsPlacement.4768, %object
 1264              		.size	ADC_InputsPlacement.4768, 2
 1265              	ADC_InputsPlacement.4768:
 1266 0008 00       		.byte	0
 1267 0009 70       		.byte	112
 1268 000a 0000     		.text
 1269              	.Letext0:
 1270              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1271              		.section	.debug_info,"",%progbits
 1272              	.Ldebug_info0:
 1273 0000 9D040000 		.4byte	0x49d
 1274 0004 0400     		.2byte	0x4
 1275 0006 00000000 		.4byte	.Ldebug_abbrev0
 1276 000a 04       		.byte	0x4
 1277 000b 01       		.uleb128 0x1
 1278 000c 22030000 		.4byte	.LASF60
 1279 0010 01       		.byte	0x1
 1280 0011 84020000 		.4byte	.LASF61
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 39


 1281 0015 94010000 		.4byte	.LASF62
 1282 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1283 001d 00000000 		.4byte	0
 1284 0021 00000000 		.4byte	.Ldebug_line0
 1285 0025 02       		.uleb128 0x2
 1286 0026 01       		.byte	0x1
 1287 0027 06       		.byte	0x6
 1288 0028 7C000000 		.4byte	.LASF0
 1289 002c 02       		.uleb128 0x2
 1290 002d 01       		.byte	0x1
 1291 002e 08       		.byte	0x8
 1292 002f A3020000 		.4byte	.LASF1
 1293 0033 02       		.uleb128 0x2
 1294 0034 02       		.byte	0x2
 1295 0035 05       		.byte	0x5
 1296 0036 BC020000 		.4byte	.LASF2
 1297 003a 02       		.uleb128 0x2
 1298 003b 02       		.byte	0x2
 1299 003c 07       		.byte	0x7
 1300 003d 53010000 		.4byte	.LASF3
 1301 0041 02       		.uleb128 0x2
 1302 0042 04       		.byte	0x4
 1303 0043 05       		.byte	0x5
 1304 0044 9F000000 		.4byte	.LASF4
 1305 0048 02       		.uleb128 0x2
 1306 0049 04       		.byte	0x4
 1307 004a 07       		.byte	0x7
 1308 004b 22010000 		.4byte	.LASF5
 1309 004f 02       		.uleb128 0x2
 1310 0050 08       		.byte	0x8
 1311 0051 05       		.byte	0x5
 1312 0052 6E000000 		.4byte	.LASF6
 1313 0056 02       		.uleb128 0x2
 1314 0057 08       		.byte	0x8
 1315 0058 07       		.byte	0x7
 1316 0059 32000000 		.4byte	.LASF7
 1317 005d 03       		.uleb128 0x3
 1318 005e 04       		.byte	0x4
 1319 005f 05       		.byte	0x5
 1320 0060 696E7400 		.ascii	"int\000"
 1321 0064 02       		.uleb128 0x2
 1322 0065 04       		.byte	0x4
 1323 0066 07       		.byte	0x7
 1324 0067 0E010000 		.4byte	.LASF8
 1325 006b 04       		.uleb128 0x4
 1326 006c D0000000 		.4byte	.LASF9
 1327 0070 02       		.byte	0x2
 1328 0071 3801     		.2byte	0x138
 1329 0073 2C000000 		.4byte	0x2c
 1330 0077 04       		.uleb128 0x4
 1331 0078 00000000 		.4byte	.LASF10
 1332 007c 02       		.byte	0x2
 1333 007d 3901     		.2byte	0x139
 1334 007f 3A000000 		.4byte	0x3a
 1335 0083 04       		.uleb128 0x4
 1336 0084 DD000000 		.4byte	.LASF11
 1337 0088 02       		.byte	0x2
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 40


 1338 0089 3A01     		.2byte	0x13a
 1339 008b 48000000 		.4byte	0x48
 1340 008f 04       		.uleb128 0x4
 1341 0090 0E030000 		.4byte	.LASF12
 1342 0094 02       		.byte	0x2
 1343 0095 3C01     		.2byte	0x13c
 1344 0097 33000000 		.4byte	0x33
 1345 009b 04       		.uleb128 0x4
 1346 009c 8F000000 		.4byte	.LASF13
 1347 00a0 02       		.byte	0x2
 1348 00a1 3D01     		.2byte	0x13d
 1349 00a3 41000000 		.4byte	0x41
 1350 00a7 04       		.uleb128 0x4
 1351 00a8 83010000 		.4byte	.LASF14
 1352 00ac 02       		.byte	0x2
 1353 00ad 3E01     		.2byte	0x13e
 1354 00af B3000000 		.4byte	0xb3
 1355 00b3 02       		.uleb128 0x2
 1356 00b4 04       		.byte	0x4
 1357 00b5 04       		.byte	0x4
 1358 00b6 50020000 		.4byte	.LASF15
 1359 00ba 02       		.uleb128 0x2
 1360 00bb 08       		.byte	0x8
 1361 00bc 04       		.byte	0x4
 1362 00bd D6000000 		.4byte	.LASF16
 1363 00c1 04       		.uleb128 0x4
 1364 00c2 2E020000 		.4byte	.LASF17
 1365 00c6 02       		.byte	0x2
 1366 00c7 4301     		.2byte	0x143
 1367 00c9 4F000000 		.4byte	0x4f
 1368 00cd 02       		.uleb128 0x2
 1369 00ce 01       		.byte	0x1
 1370 00cf 08       		.byte	0x8
 1371 00d0 DA020000 		.4byte	.LASF18
 1372 00d4 04       		.uleb128 0x4
 1373 00d5 7D010000 		.4byte	.LASF19
 1374 00d9 02       		.byte	0x2
 1375 00da E401     		.2byte	0x1e4
 1376 00dc E0000000 		.4byte	0xe0
 1377 00e0 05       		.uleb128 0x5
 1378 00e1 83000000 		.4byte	0x83
 1379 00e5 02       		.uleb128 0x2
 1380 00e6 04       		.byte	0x4
 1381 00e7 07       		.byte	0x7
 1382 00e8 8B010000 		.4byte	.LASF20
 1383 00ec 06       		.uleb128 0x6
 1384 00ed 95000000 		.4byte	.LASF25
 1385 00f1 01       		.byte	0x1
 1386 00f2 3F       		.byte	0x3f
 1387 00f3 00000000 		.4byte	.LFB2
 1388 00f7 24000000 		.4byte	.LFE2-.LFB2
 1389 00fb 01       		.uleb128 0x1
 1390 00fc 9C       		.byte	0x9c
 1391 00fd 07       		.uleb128 0x7
 1392 00fe 29000000 		.4byte	.LASF36
 1393 0102 01       		.byte	0x1
 1394 0103 5E       		.byte	0x5e
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 41


 1395 0104 00000000 		.4byte	.LFB3
 1396 0108 18020000 		.4byte	.LFE3-.LFB3
 1397 010c 01       		.uleb128 0x1
 1398 010d 9C       		.byte	0x9c
 1399 010e 4E010000 		.4byte	0x14e
 1400 0112 08       		.uleb128 0x8
 1401 0113 CF020000 		.4byte	.LASF21
 1402 0117 01       		.byte	0x1
 1403 0118 60       		.byte	0x60
 1404 0119 83000000 		.4byte	0x83
 1405 011d 02       		.uleb128 0x2
 1406 011e 91       		.byte	0x91
 1407 011f 74       		.sleb128 -12
 1408 0120 08       		.uleb128 0x8
 1409 0121 49010000 		.4byte	.LASF22
 1410 0125 01       		.byte	0x1
 1411 0126 61       		.byte	0x61
 1412 0127 83000000 		.4byte	0x83
 1413 012b 02       		.uleb128 0x2
 1414 012c 91       		.byte	0x91
 1415 012d 6C       		.sleb128 -20
 1416 012e 08       		.uleb128 0x8
 1417 012f 0F000000 		.4byte	.LASF23
 1418 0133 01       		.byte	0x1
 1419 0134 62       		.byte	0x62
 1420 0135 9B000000 		.4byte	0x9b
 1421 0139 02       		.uleb128 0x2
 1422 013a 91       		.byte	0x91
 1423 013b 70       		.sleb128 -16
 1424 013c 08       		.uleb128 0x8
 1425 013d 49000000 		.4byte	.LASF24
 1426 0141 01       		.byte	0x1
 1427 0142 65       		.byte	0x65
 1428 0143 5E010000 		.4byte	0x15e
 1429 0147 05       		.uleb128 0x5
 1430 0148 03       		.byte	0x3
 1431 0149 08000000 		.4byte	ADC_InputsPlacement.4768
 1432 014d 00       		.byte	0
 1433 014e 09       		.uleb128 0x9
 1434 014f 6B000000 		.4byte	0x6b
 1435 0153 5E010000 		.4byte	0x15e
 1436 0157 0A       		.uleb128 0xa
 1437 0158 E5000000 		.4byte	0xe5
 1438 015c 01       		.byte	0x1
 1439 015d 00       		.byte	0
 1440 015e 0B       		.uleb128 0xb
 1441 015f 4E010000 		.4byte	0x14e
 1442 0163 0C       		.uleb128 0xc
 1443 0164 03030000 		.4byte	.LASF26
 1444 0168 01       		.byte	0x1
 1445 0169 4A01     		.2byte	0x14a
 1446 016b 00000000 		.4byte	.LFB4
 1447 016f 38000000 		.4byte	.LFE4-.LFB4
 1448 0173 01       		.uleb128 0x1
 1449 0174 9C       		.byte	0x9c
 1450 0175 0D       		.uleb128 0xd
 1451 0176 C6020000 		.4byte	.LASF27
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 42


 1452 017a 01       		.byte	0x1
 1453 017b 6D01     		.2byte	0x16d
 1454 017d 00000000 		.4byte	.LFB5
 1455 0181 18000000 		.4byte	.LFE5-.LFB5
 1456 0185 01       		.uleb128 0x1
 1457 0186 9C       		.byte	0x9c
 1458 0187 0D       		.uleb128 0xd
 1459 0188 5D000000 		.4byte	.LASF28
 1460 018c 01       		.byte	0x1
 1461 018d 8701     		.2byte	0x187
 1462 018f 00000000 		.4byte	.LFB6
 1463 0193 14000000 		.4byte	.LFE6-.LFB6
 1464 0197 01       		.uleb128 0x1
 1465 0198 9C       		.byte	0x9c
 1466 0199 0D       		.uleb128 0xd
 1467 019a 66010000 		.4byte	.LASF29
 1468 019e 01       		.byte	0x1
 1469 019f A001     		.2byte	0x1a0
 1470 01a1 00000000 		.4byte	.LFB7
 1471 01a5 08000000 		.4byte	.LFE7-.LFB7
 1472 01a9 01       		.uleb128 0x1
 1473 01aa 9C       		.byte	0x9c
 1474 01ab 0E       		.uleb128 0xe
 1475 01ac 1A020000 		.4byte	.LASF31
 1476 01b0 01       		.byte	0x1
 1477 01b1 C201     		.2byte	0x1c2
 1478 01b3 83000000 		.4byte	0x83
 1479 01b7 00000000 		.4byte	.LFB8
 1480 01bb 48000000 		.4byte	.LFE8-.LFB8
 1481 01bf 01       		.uleb128 0x1
 1482 01c0 9C       		.byte	0x9c
 1483 01c1 E4010000 		.4byte	0x1e4
 1484 01c5 0F       		.uleb128 0xf
 1485 01c6 F5000000 		.4byte	.LASF33
 1486 01ca 01       		.byte	0x1
 1487 01cb C201     		.2byte	0x1c2
 1488 01cd 83000000 		.4byte	0x83
 1489 01d1 02       		.uleb128 0x2
 1490 01d2 91       		.byte	0x91
 1491 01d3 6C       		.sleb128 -20
 1492 01d4 10       		.uleb128 0x10
 1493 01d5 88000000 		.4byte	.LASF30
 1494 01d9 01       		.byte	0x1
 1495 01da C401     		.2byte	0x1c4
 1496 01dc 83000000 		.4byte	0x83
 1497 01e0 02       		.uleb128 0x2
 1498 01e1 91       		.byte	0x91
 1499 01e2 74       		.sleb128 -12
 1500 01e3 00       		.byte	0
 1501 01e4 11       		.uleb128 0x11
 1502 01e5 B7030000 		.4byte	.LASF32
 1503 01e9 01       		.byte	0x1
 1504 01ea F801     		.2byte	0x1f8
 1505 01ec 8F000000 		.4byte	0x8f
 1506 01f0 00000000 		.4byte	.LFB9
 1507 01f4 44000000 		.4byte	.LFE9-.LFB9
 1508 01f8 01       		.uleb128 0x1
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 43


 1509 01f9 9C       		.byte	0x9c
 1510 01fa 1D020000 		.4byte	0x21d
 1511 01fe 0F       		.uleb128 0xf
 1512 01ff D5020000 		.4byte	.LASF34
 1513 0203 01       		.byte	0x1
 1514 0204 F801     		.2byte	0x1f8
 1515 0206 83000000 		.4byte	0x83
 1516 020a 02       		.uleb128 0x2
 1517 020b 91       		.byte	0x91
 1518 020c 6C       		.sleb128 -20
 1519 020d 10       		.uleb128 0x10
 1520 020e B0030000 		.4byte	.LASF35
 1521 0212 01       		.byte	0x1
 1522 0213 FA01     		.2byte	0x1fa
 1523 0215 83000000 		.4byte	0x83
 1524 0219 02       		.uleb128 0x2
 1525 021a 91       		.byte	0x91
 1526 021b 74       		.sleb128 -12
 1527 021c 00       		.byte	0
 1528 021d 12       		.uleb128 0x12
 1529 021e 34020000 		.4byte	.LASF37
 1530 0222 01       		.byte	0x1
 1531 0223 2502     		.2byte	0x225
 1532 0225 00000000 		.4byte	.LFB10
 1533 0229 1C000000 		.4byte	.LFE10-.LFB10
 1534 022d 01       		.uleb128 0x1
 1535 022e 9C       		.byte	0x9c
 1536 022f 43020000 		.4byte	0x243
 1537 0233 0F       		.uleb128 0xf
 1538 0234 E4000000 		.4byte	.LASF38
 1539 0238 01       		.byte	0x1
 1540 0239 2502     		.2byte	0x225
 1541 023b 83000000 		.4byte	0x83
 1542 023f 02       		.uleb128 0x2
 1543 0240 91       		.byte	0x91
 1544 0241 74       		.sleb128 -12
 1545 0242 00       		.byte	0
 1546 0243 12       		.uleb128 0x12
 1547 0244 74020000 		.4byte	.LASF39
 1548 0248 01       		.byte	0x1
 1549 0249 5102     		.2byte	0x251
 1550 024b 00000000 		.4byte	.LFB11
 1551 024f 30000000 		.4byte	.LFE11-.LFB11
 1552 0253 01       		.uleb128 0x1
 1553 0254 9C       		.byte	0x9c
 1554 0255 69020000 		.4byte	0x269
 1555 0259 0F       		.uleb128 0xf
 1556 025a 00020000 		.4byte	.LASF40
 1557 025e 01       		.byte	0x1
 1558 025f 5102     		.2byte	0x251
 1559 0261 83000000 		.4byte	0x83
 1560 0265 02       		.uleb128 0x2
 1561 0266 91       		.byte	0x91
 1562 0267 74       		.sleb128 -12
 1563 0268 00       		.byte	0
 1564 0269 12       		.uleb128 0x12
 1565 026a 09020000 		.4byte	.LASF41
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 44


 1566 026e 01       		.byte	0x1
 1567 026f 6602     		.2byte	0x266
 1568 0271 00000000 		.4byte	.LFB12
 1569 0275 2C000000 		.4byte	.LFE12-.LFB12
 1570 0279 01       		.uleb128 0x1
 1571 027a 9C       		.byte	0x9c
 1572 027b 8F020000 		.4byte	0x28f
 1573 027f 0F       		.uleb128 0xf
 1574 0280 56020000 		.4byte	.LASF42
 1575 0284 01       		.byte	0x1
 1576 0285 6602     		.2byte	0x266
 1577 0287 83000000 		.4byte	0x83
 1578 028b 02       		.uleb128 0x2
 1579 028c 91       		.byte	0x91
 1580 028d 74       		.sleb128 -12
 1581 028e 00       		.byte	0
 1582 028f 12       		.uleb128 0x12
 1583 0290 FD000000 		.4byte	.LASF43
 1584 0294 01       		.byte	0x1
 1585 0295 7E02     		.2byte	0x27e
 1586 0297 00000000 		.4byte	.LFB13
 1587 029b 1C000000 		.4byte	.LFE13-.LFB13
 1588 029f 01       		.uleb128 0x1
 1589 02a0 9C       		.byte	0x9c
 1590 02a1 B5020000 		.4byte	0x2b5
 1591 02a5 0F       		.uleb128 0xf
 1592 02a6 E4000000 		.4byte	.LASF38
 1593 02aa 01       		.byte	0x1
 1594 02ab 7E02     		.2byte	0x27e
 1595 02ad 83000000 		.4byte	0x83
 1596 02b1 02       		.uleb128 0x2
 1597 02b2 91       		.byte	0x91
 1598 02b3 74       		.sleb128 -12
 1599 02b4 00       		.byte	0
 1600 02b5 12       		.uleb128 0x12
 1601 02b6 34010000 		.4byte	.LASF44
 1602 02ba 01       		.byte	0x1
 1603 02bb 9502     		.2byte	0x295
 1604 02bd 00000000 		.4byte	.LFB14
 1605 02c1 1C000000 		.4byte	.LFE14-.LFB14
 1606 02c5 01       		.uleb128 0x1
 1607 02c6 9C       		.byte	0x9c
 1608 02c7 DB020000 		.4byte	0x2db
 1609 02cb 0F       		.uleb128 0xf
 1610 02cc E4000000 		.4byte	.LASF38
 1611 02d0 01       		.byte	0x1
 1612 02d1 9502     		.2byte	0x295
 1613 02d3 83000000 		.4byte	0x83
 1614 02d7 02       		.uleb128 0x2
 1615 02d8 91       		.byte	0x91
 1616 02d9 74       		.sleb128 -12
 1617 02da 00       		.byte	0
 1618 02db 13       		.uleb128 0x13
 1619 02dc 14030000 		.4byte	.LASF45
 1620 02e0 01       		.byte	0x1
 1621 02e1 B102     		.2byte	0x2b1
 1622 02e3 00000000 		.4byte	.LFB15
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 45


 1623 02e7 30000000 		.4byte	.LFE15-.LFB15
 1624 02eb 01       		.uleb128 0x1
 1625 02ec 9C       		.byte	0x9c
 1626 02ed 10030000 		.4byte	0x310
 1627 02f1 0F       		.uleb128 0xf
 1628 02f2 D5020000 		.4byte	.LASF34
 1629 02f6 01       		.byte	0x1
 1630 02f7 B102     		.2byte	0x2b1
 1631 02f9 83000000 		.4byte	0x83
 1632 02fd 02       		.uleb128 0x2
 1633 02fe 91       		.byte	0x91
 1634 02ff 74       		.sleb128 -12
 1635 0300 0F       		.uleb128 0xf
 1636 0301 F2020000 		.4byte	.LASF46
 1637 0305 01       		.byte	0x1
 1638 0306 B102     		.2byte	0x2b1
 1639 0308 8F000000 		.4byte	0x8f
 1640 030c 02       		.uleb128 0x2
 1641 030d 91       		.byte	0x91
 1642 030e 72       		.sleb128 -14
 1643 030f 00       		.byte	0
 1644 0310 13       		.uleb128 0x13
 1645 0311 44020000 		.4byte	.LASF47
 1646 0315 01       		.byte	0x1
 1647 0316 D302     		.2byte	0x2d3
 1648 0318 00000000 		.4byte	.LFB16
 1649 031c 2C000000 		.4byte	.LFE16-.LFB16
 1650 0320 01       		.uleb128 0x1
 1651 0321 9C       		.byte	0x9c
 1652 0322 45030000 		.4byte	0x345
 1653 0326 0F       		.uleb128 0xf
 1654 0327 D5020000 		.4byte	.LASF34
 1655 032b 01       		.byte	0x1
 1656 032c D302     		.2byte	0x2d3
 1657 032e 83000000 		.4byte	0x83
 1658 0332 02       		.uleb128 0x2
 1659 0333 91       		.byte	0x91
 1660 0334 74       		.sleb128 -12
 1661 0335 0F       		.uleb128 0xf
 1662 0336 07000000 		.4byte	.LASF48
 1663 033a 01       		.byte	0x1
 1664 033b D302     		.2byte	0x2d3
 1665 033d 9B000000 		.4byte	0x9b
 1666 0341 02       		.uleb128 0x2
 1667 0342 91       		.byte	0x91
 1668 0343 70       		.sleb128 -16
 1669 0344 00       		.byte	0
 1670 0345 11       		.uleb128 0x11
 1671 0346 60020000 		.4byte	.LASF49
 1672 034a 01       		.byte	0x1
 1673 034b F402     		.2byte	0x2f4
 1674 034d 8F000000 		.4byte	0x8f
 1675 0351 00000000 		.4byte	.LFB17
 1676 0355 A4000000 		.4byte	.LFE17-.LFB17
 1677 0359 01       		.uleb128 0x1
 1678 035a 9C       		.byte	0x9c
 1679 035b 8D030000 		.4byte	0x38d
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 46


 1680 035f 0F       		.uleb128 0xf
 1681 0360 D5020000 		.4byte	.LASF34
 1682 0364 01       		.byte	0x1
 1683 0365 F402     		.2byte	0x2f4
 1684 0367 83000000 		.4byte	0x83
 1685 036b 02       		.uleb128 0x2
 1686 036c 91       		.byte	0x91
 1687 036d 6C       		.sleb128 -20
 1688 036e 0F       		.uleb128 0xf
 1689 036f F9020000 		.4byte	.LASF50
 1690 0373 01       		.byte	0x1
 1691 0374 F402     		.2byte	0x2f4
 1692 0376 8F000000 		.4byte	0x8f
 1693 037a 02       		.uleb128 0x2
 1694 037b 91       		.byte	0x91
 1695 037c 6A       		.sleb128 -22
 1696 037d 10       		.uleb128 0x10
 1697 037e 76010000 		.4byte	.LASF51
 1698 0382 01       		.byte	0x1
 1699 0383 F602     		.2byte	0x2f6
 1700 0385 8F000000 		.4byte	0x8f
 1701 0389 02       		.uleb128 0x2
 1702 038a 91       		.byte	0x91
 1703 038b 76       		.sleb128 -10
 1704 038c 00       		.byte	0
 1705 038d 11       		.uleb128 0x11
 1706 038e A8000000 		.4byte	.LASF52
 1707 0392 01       		.byte	0x1
 1708 0393 2A03     		.2byte	0x32a
 1709 0395 9B000000 		.4byte	0x9b
 1710 0399 00000000 		.4byte	.LFB18
 1711 039d 90000000 		.4byte	.LFE18-.LFB18
 1712 03a1 01       		.uleb128 0x1
 1713 03a2 9C       		.byte	0x9c
 1714 03a3 D5030000 		.4byte	0x3d5
 1715 03a7 0F       		.uleb128 0xf
 1716 03a8 D5020000 		.4byte	.LASF34
 1717 03ac 01       		.byte	0x1
 1718 03ad 2A03     		.2byte	0x32a
 1719 03af 83000000 		.4byte	0x83
 1720 03b3 02       		.uleb128 0x2
 1721 03b4 91       		.byte	0x91
 1722 03b5 64       		.sleb128 -28
 1723 03b6 0F       		.uleb128 0xf
 1724 03b7 F9020000 		.4byte	.LASF50
 1725 03bb 01       		.byte	0x1
 1726 03bc 2A03     		.2byte	0x32a
 1727 03be 8F000000 		.4byte	0x8f
 1728 03c2 02       		.uleb128 0x2
 1729 03c3 91       		.byte	0x91
 1730 03c4 62       		.sleb128 -30
 1731 03c5 10       		.uleb128 0x10
 1732 03c6 1B010000 		.4byte	.LASF53
 1733 03ca 01       		.byte	0x1
 1734 03cb 2C03     		.2byte	0x32c
 1735 03cd C1000000 		.4byte	0xc1
 1736 03d1 02       		.uleb128 0x2
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 47


 1737 03d2 91       		.byte	0x91
 1738 03d3 68       		.sleb128 -24
 1739 03d4 00       		.byte	0
 1740 03d5 11       		.uleb128 0x11
 1741 03d6 16000000 		.4byte	.LASF54
 1742 03da 01       		.byte	0x1
 1743 03db 5703     		.2byte	0x357
 1744 03dd A7000000 		.4byte	0xa7
 1745 03e1 00000000 		.4byte	.LFB19
 1746 03e5 80000000 		.4byte	.LFE19-.LFB19
 1747 03e9 01       		.uleb128 0x1
 1748 03ea 9C       		.byte	0x9c
 1749 03eb 1D040000 		.4byte	0x41d
 1750 03ef 0F       		.uleb128 0xf
 1751 03f0 D5020000 		.4byte	.LASF34
 1752 03f4 01       		.byte	0x1
 1753 03f5 5703     		.2byte	0x357
 1754 03f7 83000000 		.4byte	0x83
 1755 03fb 02       		.uleb128 0x2
 1756 03fc 91       		.byte	0x91
 1757 03fd 64       		.sleb128 -28
 1758 03fe 0F       		.uleb128 0xf
 1759 03ff F9020000 		.4byte	.LASF50
 1760 0403 01       		.byte	0x1
 1761 0404 5703     		.2byte	0x357
 1762 0406 8F000000 		.4byte	0x8f
 1763 040a 02       		.uleb128 0x2
 1764 040b 91       		.byte	0x91
 1765 040c 62       		.sleb128 -30
 1766 040d 10       		.uleb128 0x10
 1767 040e 43010000 		.4byte	.LASF55
 1768 0412 01       		.byte	0x1
 1769 0413 5903     		.2byte	0x359
 1770 0415 A7000000 		.4byte	0xa7
 1771 0419 02       		.uleb128 0x2
 1772 041a 91       		.byte	0x91
 1773 041b 6C       		.sleb128 -20
 1774 041c 00       		.byte	0
 1775 041d 09       		.uleb128 0x9
 1776 041e 83000000 		.4byte	0x83
 1777 0422 2D040000 		.4byte	0x42d
 1778 0426 0A       		.uleb128 0xa
 1779 0427 E5000000 		.4byte	0xe5
 1780 042b 01       		.byte	0x1
 1781 042c 00       		.byte	0
 1782 042d 08       		.uleb128 0x8
 1783 042e DF020000 		.4byte	.LASF56
 1784 0432 01       		.byte	0x1
 1785 0433 21       		.byte	0x21
 1786 0434 3E040000 		.4byte	0x43e
 1787 0438 05       		.uleb128 0x5
 1788 0439 03       		.byte	0x3
 1789 043a 00000000 		.4byte	ADC_channelsConfig
 1790 043e 0B       		.uleb128 0xb
 1791 043f 1D040000 		.4byte	0x41d
 1792 0443 14       		.uleb128 0x14
 1793 0444 E9000000 		.4byte	.LASF57
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 48


 1794 0448 01       		.byte	0x1
 1795 0449 18       		.byte	0x18
 1796 044a 6B000000 		.4byte	0x6b
 1797 044e 05       		.uleb128 0x5
 1798 044f 03       		.byte	0x3
 1799 0450 00000000 		.4byte	ADC_initVar
 1800 0454 09       		.uleb128 0x9
 1801 0455 8F000000 		.4byte	0x8f
 1802 0459 64040000 		.4byte	0x464
 1803 045d 0A       		.uleb128 0xa
 1804 045e E5000000 		.4byte	0xe5
 1805 0462 01       		.byte	0x1
 1806 0463 00       		.byte	0
 1807 0464 14       		.uleb128 0x14
 1808 0465 B1020000 		.4byte	.LASF58
 1809 0469 01       		.byte	0x1
 1810 046a 19       		.byte	0x19
 1811 046b 75040000 		.4byte	0x475
 1812 046f 05       		.uleb128 0x5
 1813 0470 03       		.byte	0x3
 1814 0471 00000000 		.4byte	ADC_offset
 1815 0475 05       		.uleb128 0x5
 1816 0476 54040000 		.4byte	0x454
 1817 047a 09       		.uleb128 0x9
 1818 047b 9B000000 		.4byte	0x9b
 1819 047f 8A040000 		.4byte	0x48a
 1820 0483 0A       		.uleb128 0xa
 1821 0484 E5000000 		.4byte	0xe5
 1822 0488 01       		.byte	0x1
 1823 0489 00       		.byte	0
 1824 048a 14       		.uleb128 0x14
 1825 048b BC000000 		.4byte	.LASF59
 1826 048f 01       		.byte	0x1
 1827 0490 1A       		.byte	0x1a
 1828 0491 9B040000 		.4byte	0x49b
 1829 0495 05       		.uleb128 0x5
 1830 0496 03       		.byte	0x3
 1831 0497 00000000 		.4byte	ADC_countsPer10Volt
 1832 049b 05       		.uleb128 0x5
 1833 049c 7A040000 		.4byte	0x47a
 1834 04a0 00       		.byte	0
 1835              		.section	.debug_abbrev,"",%progbits
 1836              	.Ldebug_abbrev0:
 1837 0000 01       		.uleb128 0x1
 1838 0001 11       		.uleb128 0x11
 1839 0002 01       		.byte	0x1
 1840 0003 25       		.uleb128 0x25
 1841 0004 0E       		.uleb128 0xe
 1842 0005 13       		.uleb128 0x13
 1843 0006 0B       		.uleb128 0xb
 1844 0007 03       		.uleb128 0x3
 1845 0008 0E       		.uleb128 0xe
 1846 0009 1B       		.uleb128 0x1b
 1847 000a 0E       		.uleb128 0xe
 1848 000b 55       		.uleb128 0x55
 1849 000c 17       		.uleb128 0x17
 1850 000d 11       		.uleb128 0x11
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 49


 1851 000e 01       		.uleb128 0x1
 1852 000f 10       		.uleb128 0x10
 1853 0010 17       		.uleb128 0x17
 1854 0011 00       		.byte	0
 1855 0012 00       		.byte	0
 1856 0013 02       		.uleb128 0x2
 1857 0014 24       		.uleb128 0x24
 1858 0015 00       		.byte	0
 1859 0016 0B       		.uleb128 0xb
 1860 0017 0B       		.uleb128 0xb
 1861 0018 3E       		.uleb128 0x3e
 1862 0019 0B       		.uleb128 0xb
 1863 001a 03       		.uleb128 0x3
 1864 001b 0E       		.uleb128 0xe
 1865 001c 00       		.byte	0
 1866 001d 00       		.byte	0
 1867 001e 03       		.uleb128 0x3
 1868 001f 24       		.uleb128 0x24
 1869 0020 00       		.byte	0
 1870 0021 0B       		.uleb128 0xb
 1871 0022 0B       		.uleb128 0xb
 1872 0023 3E       		.uleb128 0x3e
 1873 0024 0B       		.uleb128 0xb
 1874 0025 03       		.uleb128 0x3
 1875 0026 08       		.uleb128 0x8
 1876 0027 00       		.byte	0
 1877 0028 00       		.byte	0
 1878 0029 04       		.uleb128 0x4
 1879 002a 16       		.uleb128 0x16
 1880 002b 00       		.byte	0
 1881 002c 03       		.uleb128 0x3
 1882 002d 0E       		.uleb128 0xe
 1883 002e 3A       		.uleb128 0x3a
 1884 002f 0B       		.uleb128 0xb
 1885 0030 3B       		.uleb128 0x3b
 1886 0031 05       		.uleb128 0x5
 1887 0032 49       		.uleb128 0x49
 1888 0033 13       		.uleb128 0x13
 1889 0034 00       		.byte	0
 1890 0035 00       		.byte	0
 1891 0036 05       		.uleb128 0x5
 1892 0037 35       		.uleb128 0x35
 1893 0038 00       		.byte	0
 1894 0039 49       		.uleb128 0x49
 1895 003a 13       		.uleb128 0x13
 1896 003b 00       		.byte	0
 1897 003c 00       		.byte	0
 1898 003d 06       		.uleb128 0x6
 1899 003e 2E       		.uleb128 0x2e
 1900 003f 00       		.byte	0
 1901 0040 3F       		.uleb128 0x3f
 1902 0041 19       		.uleb128 0x19
 1903 0042 03       		.uleb128 0x3
 1904 0043 0E       		.uleb128 0xe
 1905 0044 3A       		.uleb128 0x3a
 1906 0045 0B       		.uleb128 0xb
 1907 0046 3B       		.uleb128 0x3b
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 50


 1908 0047 0B       		.uleb128 0xb
 1909 0048 27       		.uleb128 0x27
 1910 0049 19       		.uleb128 0x19
 1911 004a 11       		.uleb128 0x11
 1912 004b 01       		.uleb128 0x1
 1913 004c 12       		.uleb128 0x12
 1914 004d 06       		.uleb128 0x6
 1915 004e 40       		.uleb128 0x40
 1916 004f 18       		.uleb128 0x18
 1917 0050 9642     		.uleb128 0x2116
 1918 0052 19       		.uleb128 0x19
 1919 0053 00       		.byte	0
 1920 0054 00       		.byte	0
 1921 0055 07       		.uleb128 0x7
 1922 0056 2E       		.uleb128 0x2e
 1923 0057 01       		.byte	0x1
 1924 0058 3F       		.uleb128 0x3f
 1925 0059 19       		.uleb128 0x19
 1926 005a 03       		.uleb128 0x3
 1927 005b 0E       		.uleb128 0xe
 1928 005c 3A       		.uleb128 0x3a
 1929 005d 0B       		.uleb128 0xb
 1930 005e 3B       		.uleb128 0x3b
 1931 005f 0B       		.uleb128 0xb
 1932 0060 27       		.uleb128 0x27
 1933 0061 19       		.uleb128 0x19
 1934 0062 11       		.uleb128 0x11
 1935 0063 01       		.uleb128 0x1
 1936 0064 12       		.uleb128 0x12
 1937 0065 06       		.uleb128 0x6
 1938 0066 40       		.uleb128 0x40
 1939 0067 18       		.uleb128 0x18
 1940 0068 9642     		.uleb128 0x2116
 1941 006a 19       		.uleb128 0x19
 1942 006b 01       		.uleb128 0x1
 1943 006c 13       		.uleb128 0x13
 1944 006d 00       		.byte	0
 1945 006e 00       		.byte	0
 1946 006f 08       		.uleb128 0x8
 1947 0070 34       		.uleb128 0x34
 1948 0071 00       		.byte	0
 1949 0072 03       		.uleb128 0x3
 1950 0073 0E       		.uleb128 0xe
 1951 0074 3A       		.uleb128 0x3a
 1952 0075 0B       		.uleb128 0xb
 1953 0076 3B       		.uleb128 0x3b
 1954 0077 0B       		.uleb128 0xb
 1955 0078 49       		.uleb128 0x49
 1956 0079 13       		.uleb128 0x13
 1957 007a 02       		.uleb128 0x2
 1958 007b 18       		.uleb128 0x18
 1959 007c 00       		.byte	0
 1960 007d 00       		.byte	0
 1961 007e 09       		.uleb128 0x9
 1962 007f 01       		.uleb128 0x1
 1963 0080 01       		.byte	0x1
 1964 0081 49       		.uleb128 0x49
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 51


 1965 0082 13       		.uleb128 0x13
 1966 0083 01       		.uleb128 0x1
 1967 0084 13       		.uleb128 0x13
 1968 0085 00       		.byte	0
 1969 0086 00       		.byte	0
 1970 0087 0A       		.uleb128 0xa
 1971 0088 21       		.uleb128 0x21
 1972 0089 00       		.byte	0
 1973 008a 49       		.uleb128 0x49
 1974 008b 13       		.uleb128 0x13
 1975 008c 2F       		.uleb128 0x2f
 1976 008d 0B       		.uleb128 0xb
 1977 008e 00       		.byte	0
 1978 008f 00       		.byte	0
 1979 0090 0B       		.uleb128 0xb
 1980 0091 26       		.uleb128 0x26
 1981 0092 00       		.byte	0
 1982 0093 49       		.uleb128 0x49
 1983 0094 13       		.uleb128 0x13
 1984 0095 00       		.byte	0
 1985 0096 00       		.byte	0
 1986 0097 0C       		.uleb128 0xc
 1987 0098 2E       		.uleb128 0x2e
 1988 0099 00       		.byte	0
 1989 009a 3F       		.uleb128 0x3f
 1990 009b 19       		.uleb128 0x19
 1991 009c 03       		.uleb128 0x3
 1992 009d 0E       		.uleb128 0xe
 1993 009e 3A       		.uleb128 0x3a
 1994 009f 0B       		.uleb128 0xb
 1995 00a0 3B       		.uleb128 0x3b
 1996 00a1 05       		.uleb128 0x5
 1997 00a2 27       		.uleb128 0x27
 1998 00a3 19       		.uleb128 0x19
 1999 00a4 11       		.uleb128 0x11
 2000 00a5 01       		.uleb128 0x1
 2001 00a6 12       		.uleb128 0x12
 2002 00a7 06       		.uleb128 0x6
 2003 00a8 40       		.uleb128 0x40
 2004 00a9 18       		.uleb128 0x18
 2005 00aa 9642     		.uleb128 0x2116
 2006 00ac 19       		.uleb128 0x19
 2007 00ad 00       		.byte	0
 2008 00ae 00       		.byte	0
 2009 00af 0D       		.uleb128 0xd
 2010 00b0 2E       		.uleb128 0x2e
 2011 00b1 00       		.byte	0
 2012 00b2 3F       		.uleb128 0x3f
 2013 00b3 19       		.uleb128 0x19
 2014 00b4 03       		.uleb128 0x3
 2015 00b5 0E       		.uleb128 0xe
 2016 00b6 3A       		.uleb128 0x3a
 2017 00b7 0B       		.uleb128 0xb
 2018 00b8 3B       		.uleb128 0x3b
 2019 00b9 05       		.uleb128 0x5
 2020 00ba 27       		.uleb128 0x27
 2021 00bb 19       		.uleb128 0x19
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 52


 2022 00bc 11       		.uleb128 0x11
 2023 00bd 01       		.uleb128 0x1
 2024 00be 12       		.uleb128 0x12
 2025 00bf 06       		.uleb128 0x6
 2026 00c0 40       		.uleb128 0x40
 2027 00c1 18       		.uleb128 0x18
 2028 00c2 9742     		.uleb128 0x2117
 2029 00c4 19       		.uleb128 0x19
 2030 00c5 00       		.byte	0
 2031 00c6 00       		.byte	0
 2032 00c7 0E       		.uleb128 0xe
 2033 00c8 2E       		.uleb128 0x2e
 2034 00c9 01       		.byte	0x1
 2035 00ca 3F       		.uleb128 0x3f
 2036 00cb 19       		.uleb128 0x19
 2037 00cc 03       		.uleb128 0x3
 2038 00cd 0E       		.uleb128 0xe
 2039 00ce 3A       		.uleb128 0x3a
 2040 00cf 0B       		.uleb128 0xb
 2041 00d0 3B       		.uleb128 0x3b
 2042 00d1 05       		.uleb128 0x5
 2043 00d2 27       		.uleb128 0x27
 2044 00d3 19       		.uleb128 0x19
 2045 00d4 49       		.uleb128 0x49
 2046 00d5 13       		.uleb128 0x13
 2047 00d6 11       		.uleb128 0x11
 2048 00d7 01       		.uleb128 0x1
 2049 00d8 12       		.uleb128 0x12
 2050 00d9 06       		.uleb128 0x6
 2051 00da 40       		.uleb128 0x40
 2052 00db 18       		.uleb128 0x18
 2053 00dc 9742     		.uleb128 0x2117
 2054 00de 19       		.uleb128 0x19
 2055 00df 01       		.uleb128 0x1
 2056 00e0 13       		.uleb128 0x13
 2057 00e1 00       		.byte	0
 2058 00e2 00       		.byte	0
 2059 00e3 0F       		.uleb128 0xf
 2060 00e4 05       		.uleb128 0x5
 2061 00e5 00       		.byte	0
 2062 00e6 03       		.uleb128 0x3
 2063 00e7 0E       		.uleb128 0xe
 2064 00e8 3A       		.uleb128 0x3a
 2065 00e9 0B       		.uleb128 0xb
 2066 00ea 3B       		.uleb128 0x3b
 2067 00eb 05       		.uleb128 0x5
 2068 00ec 49       		.uleb128 0x49
 2069 00ed 13       		.uleb128 0x13
 2070 00ee 02       		.uleb128 0x2
 2071 00ef 18       		.uleb128 0x18
 2072 00f0 00       		.byte	0
 2073 00f1 00       		.byte	0
 2074 00f2 10       		.uleb128 0x10
 2075 00f3 34       		.uleb128 0x34
 2076 00f4 00       		.byte	0
 2077 00f5 03       		.uleb128 0x3
 2078 00f6 0E       		.uleb128 0xe
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 53


 2079 00f7 3A       		.uleb128 0x3a
 2080 00f8 0B       		.uleb128 0xb
 2081 00f9 3B       		.uleb128 0x3b
 2082 00fa 05       		.uleb128 0x5
 2083 00fb 49       		.uleb128 0x49
 2084 00fc 13       		.uleb128 0x13
 2085 00fd 02       		.uleb128 0x2
 2086 00fe 18       		.uleb128 0x18
 2087 00ff 00       		.byte	0
 2088 0100 00       		.byte	0
 2089 0101 11       		.uleb128 0x11
 2090 0102 2E       		.uleb128 0x2e
 2091 0103 01       		.byte	0x1
 2092 0104 3F       		.uleb128 0x3f
 2093 0105 19       		.uleb128 0x19
 2094 0106 03       		.uleb128 0x3
 2095 0107 0E       		.uleb128 0xe
 2096 0108 3A       		.uleb128 0x3a
 2097 0109 0B       		.uleb128 0xb
 2098 010a 3B       		.uleb128 0x3b
 2099 010b 05       		.uleb128 0x5
 2100 010c 27       		.uleb128 0x27
 2101 010d 19       		.uleb128 0x19
 2102 010e 49       		.uleb128 0x49
 2103 010f 13       		.uleb128 0x13
 2104 0110 11       		.uleb128 0x11
 2105 0111 01       		.uleb128 0x1
 2106 0112 12       		.uleb128 0x12
 2107 0113 06       		.uleb128 0x6
 2108 0114 40       		.uleb128 0x40
 2109 0115 18       		.uleb128 0x18
 2110 0116 9642     		.uleb128 0x2116
 2111 0118 19       		.uleb128 0x19
 2112 0119 01       		.uleb128 0x1
 2113 011a 13       		.uleb128 0x13
 2114 011b 00       		.byte	0
 2115 011c 00       		.byte	0
 2116 011d 12       		.uleb128 0x12
 2117 011e 2E       		.uleb128 0x2e
 2118 011f 01       		.byte	0x1
 2119 0120 3F       		.uleb128 0x3f
 2120 0121 19       		.uleb128 0x19
 2121 0122 03       		.uleb128 0x3
 2122 0123 0E       		.uleb128 0xe
 2123 0124 3A       		.uleb128 0x3a
 2124 0125 0B       		.uleb128 0xb
 2125 0126 3B       		.uleb128 0x3b
 2126 0127 05       		.uleb128 0x5
 2127 0128 27       		.uleb128 0x27
 2128 0129 19       		.uleb128 0x19
 2129 012a 11       		.uleb128 0x11
 2130 012b 01       		.uleb128 0x1
 2131 012c 12       		.uleb128 0x12
 2132 012d 06       		.uleb128 0x6
 2133 012e 40       		.uleb128 0x40
 2134 012f 18       		.uleb128 0x18
 2135 0130 9742     		.uleb128 0x2117
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 54


 2136 0132 19       		.uleb128 0x19
 2137 0133 01       		.uleb128 0x1
 2138 0134 13       		.uleb128 0x13
 2139 0135 00       		.byte	0
 2140 0136 00       		.byte	0
 2141 0137 13       		.uleb128 0x13
 2142 0138 2E       		.uleb128 0x2e
 2143 0139 01       		.byte	0x1
 2144 013a 3F       		.uleb128 0x3f
 2145 013b 19       		.uleb128 0x19
 2146 013c 03       		.uleb128 0x3
 2147 013d 0E       		.uleb128 0xe
 2148 013e 3A       		.uleb128 0x3a
 2149 013f 0B       		.uleb128 0xb
 2150 0140 3B       		.uleb128 0x3b
 2151 0141 05       		.uleb128 0x5
 2152 0142 27       		.uleb128 0x27
 2153 0143 19       		.uleb128 0x19
 2154 0144 11       		.uleb128 0x11
 2155 0145 01       		.uleb128 0x1
 2156 0146 12       		.uleb128 0x12
 2157 0147 06       		.uleb128 0x6
 2158 0148 40       		.uleb128 0x40
 2159 0149 18       		.uleb128 0x18
 2160 014a 9642     		.uleb128 0x2116
 2161 014c 19       		.uleb128 0x19
 2162 014d 01       		.uleb128 0x1
 2163 014e 13       		.uleb128 0x13
 2164 014f 00       		.byte	0
 2165 0150 00       		.byte	0
 2166 0151 14       		.uleb128 0x14
 2167 0152 34       		.uleb128 0x34
 2168 0153 00       		.byte	0
 2169 0154 03       		.uleb128 0x3
 2170 0155 0E       		.uleb128 0xe
 2171 0156 3A       		.uleb128 0x3a
 2172 0157 0B       		.uleb128 0xb
 2173 0158 3B       		.uleb128 0x3b
 2174 0159 0B       		.uleb128 0xb
 2175 015a 49       		.uleb128 0x49
 2176 015b 13       		.uleb128 0x13
 2177 015c 3F       		.uleb128 0x3f
 2178 015d 19       		.uleb128 0x19
 2179 015e 02       		.uleb128 0x2
 2180 015f 18       		.uleb128 0x18
 2181 0160 00       		.byte	0
 2182 0161 00       		.byte	0
 2183 0162 00       		.byte	0
 2184              		.section	.debug_aranges,"",%progbits
 2185 0000 A4000000 		.4byte	0xa4
 2186 0004 0200     		.2byte	0x2
 2187 0006 00000000 		.4byte	.Ldebug_info0
 2188 000a 04       		.byte	0x4
 2189 000b 00       		.byte	0
 2190 000c 0000     		.2byte	0
 2191 000e 0000     		.2byte	0
 2192 0010 00000000 		.4byte	.LFB2
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 55


 2193 0014 24000000 		.4byte	.LFE2-.LFB2
 2194 0018 00000000 		.4byte	.LFB3
 2195 001c 18020000 		.4byte	.LFE3-.LFB3
 2196 0020 00000000 		.4byte	.LFB4
 2197 0024 38000000 		.4byte	.LFE4-.LFB4
 2198 0028 00000000 		.4byte	.LFB5
 2199 002c 18000000 		.4byte	.LFE5-.LFB5
 2200 0030 00000000 		.4byte	.LFB6
 2201 0034 14000000 		.4byte	.LFE6-.LFB6
 2202 0038 00000000 		.4byte	.LFB7
 2203 003c 08000000 		.4byte	.LFE7-.LFB7
 2204 0040 00000000 		.4byte	.LFB8
 2205 0044 48000000 		.4byte	.LFE8-.LFB8
 2206 0048 00000000 		.4byte	.LFB9
 2207 004c 44000000 		.4byte	.LFE9-.LFB9
 2208 0050 00000000 		.4byte	.LFB10
 2209 0054 1C000000 		.4byte	.LFE10-.LFB10
 2210 0058 00000000 		.4byte	.LFB11
 2211 005c 30000000 		.4byte	.LFE11-.LFB11
 2212 0060 00000000 		.4byte	.LFB12
 2213 0064 2C000000 		.4byte	.LFE12-.LFB12
 2214 0068 00000000 		.4byte	.LFB13
 2215 006c 1C000000 		.4byte	.LFE13-.LFB13
 2216 0070 00000000 		.4byte	.LFB14
 2217 0074 1C000000 		.4byte	.LFE14-.LFB14
 2218 0078 00000000 		.4byte	.LFB15
 2219 007c 30000000 		.4byte	.LFE15-.LFB15
 2220 0080 00000000 		.4byte	.LFB16
 2221 0084 2C000000 		.4byte	.LFE16-.LFB16
 2222 0088 00000000 		.4byte	.LFB17
 2223 008c A4000000 		.4byte	.LFE17-.LFB17
 2224 0090 00000000 		.4byte	.LFB18
 2225 0094 90000000 		.4byte	.LFE18-.LFB18
 2226 0098 00000000 		.4byte	.LFB19
 2227 009c 80000000 		.4byte	.LFE19-.LFB19
 2228 00a0 00000000 		.4byte	0
 2229 00a4 00000000 		.4byte	0
 2230              		.section	.debug_ranges,"",%progbits
 2231              	.Ldebug_ranges0:
 2232 0000 00000000 		.4byte	.LFB2
 2233 0004 24000000 		.4byte	.LFE2
 2234 0008 00000000 		.4byte	.LFB3
 2235 000c 18020000 		.4byte	.LFE3
 2236 0010 00000000 		.4byte	.LFB4
 2237 0014 38000000 		.4byte	.LFE4
 2238 0018 00000000 		.4byte	.LFB5
 2239 001c 18000000 		.4byte	.LFE5
 2240 0020 00000000 		.4byte	.LFB6
 2241 0024 14000000 		.4byte	.LFE6
 2242 0028 00000000 		.4byte	.LFB7
 2243 002c 08000000 		.4byte	.LFE7
 2244 0030 00000000 		.4byte	.LFB8
 2245 0034 48000000 		.4byte	.LFE8
 2246 0038 00000000 		.4byte	.LFB9
 2247 003c 44000000 		.4byte	.LFE9
 2248 0040 00000000 		.4byte	.LFB10
 2249 0044 1C000000 		.4byte	.LFE10
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 56


 2250 0048 00000000 		.4byte	.LFB11
 2251 004c 30000000 		.4byte	.LFE11
 2252 0050 00000000 		.4byte	.LFB12
 2253 0054 2C000000 		.4byte	.LFE12
 2254 0058 00000000 		.4byte	.LFB13
 2255 005c 1C000000 		.4byte	.LFE13
 2256 0060 00000000 		.4byte	.LFB14
 2257 0064 1C000000 		.4byte	.LFE14
 2258 0068 00000000 		.4byte	.LFB15
 2259 006c 30000000 		.4byte	.LFE15
 2260 0070 00000000 		.4byte	.LFB16
 2261 0074 2C000000 		.4byte	.LFE16
 2262 0078 00000000 		.4byte	.LFB17
 2263 007c A4000000 		.4byte	.LFE17
 2264 0080 00000000 		.4byte	.LFB18
 2265 0084 90000000 		.4byte	.LFE18
 2266 0088 00000000 		.4byte	.LFB19
 2267 008c 80000000 		.4byte	.LFE19
 2268 0090 00000000 		.4byte	0
 2269 0094 00000000 		.4byte	0
 2270              		.section	.debug_line,"",%progbits
 2271              	.Ldebug_line0:
 2272 0000 9D020000 		.section	.debug_str,"MS",%progbits,1
 2272      02004200 
 2272      00000201 
 2272      FB0E0D00 
 2272      01010101 
 2273              	.LASF10:
 2274 0000 75696E74 		.ascii	"uint16\000"
 2274      313600
 2275              	.LASF48:
 2276 0007 61646347 		.ascii	"adcGain\000"
 2276      61696E00 
 2277              	.LASF23:
 2278 000f 636F756E 		.ascii	"counts\000"
 2278      747300
 2279              	.LASF54:
 2280 0016 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2280      436F756E 
 2280      7473546F 
 2280      5F566F6C 
 2280      747300
 2281              	.LASF36:
 2282 0029 4144435F 		.ascii	"ADC_Init\000"
 2282      496E6974 
 2282      00
 2283              	.LASF7:
 2284 0032 6C6F6E67 		.ascii	"long long unsigned int\000"
 2284      206C6F6E 
 2284      6720756E 
 2284      7369676E 
 2284      65642069 
 2285              	.LASF24:
 2286 0049 4144435F 		.ascii	"ADC_InputsPlacement\000"
 2286      496E7075 
 2286      7473506C 
 2286      6163656D 
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 57


 2286      656E7400 
 2287              	.LASF28:
 2288 005d 4144435F 		.ascii	"ADC_StartConvert\000"
 2288      53746172 
 2288      74436F6E 
 2288      76657274 
 2288      00
 2289              	.LASF6:
 2290 006e 6C6F6E67 		.ascii	"long long int\000"
 2290      206C6F6E 
 2290      6720696E 
 2290      7400
 2291              	.LASF0:
 2292 007c 7369676E 		.ascii	"signed char\000"
 2292      65642063 
 2292      68617200 
 2293              	.LASF30:
 2294 0088 73746174 		.ascii	"status\000"
 2294      757300
 2295              	.LASF13:
 2296 008f 696E7433 		.ascii	"int32\000"
 2296      3200
 2297              	.LASF25:
 2298 0095 4144435F 		.ascii	"ADC_Start\000"
 2298      53746172 
 2298      7400
 2299              	.LASF4:
 2300 009f 6C6F6E67 		.ascii	"long int\000"
 2300      20696E74 
 2300      00
 2301              	.LASF52:
 2302 00a8 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2302      436F756E 
 2302      7473546F 
 2302      5F75566F 
 2302      6C747300 
 2303              	.LASF59:
 2304 00bc 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2304      636F756E 
 2304      74735065 
 2304      72313056 
 2304      6F6C7400 
 2305              	.LASF9:
 2306 00d0 75696E74 		.ascii	"uint8\000"
 2306      3800
 2307              	.LASF16:
 2308 00d6 646F7562 		.ascii	"double\000"
 2308      6C6500
 2309              	.LASF11:
 2310 00dd 75696E74 		.ascii	"uint32\000"
 2310      333200
 2311              	.LASF38:
 2312 00e4 6D61736B 		.ascii	"mask\000"
 2312      00
 2313              	.LASF57:
 2314 00e9 4144435F 		.ascii	"ADC_initVar\000"
 2314      696E6974 
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 58


 2314      56617200 
 2315              	.LASF33:
 2316 00f5 7265744D 		.ascii	"retMode\000"
 2316      6F646500 
 2317              	.LASF43:
 2318 00fd 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2318      5365744C 
 2318      696D6974 
 2318      4D61736B 
 2318      00
 2319              	.LASF8:
 2320 010e 756E7369 		.ascii	"unsigned int\000"
 2320      676E6564 
 2320      20696E74 
 2320      00
 2321              	.LASF53:
 2322 011b 75566F6C 		.ascii	"uVolts\000"
 2322      747300
 2323              	.LASF5:
 2324 0122 6C6F6E67 		.ascii	"long unsigned int\000"
 2324      20756E73 
 2324      69676E65 
 2324      6420696E 
 2324      7400
 2325              	.LASF44:
 2326 0134 4144435F 		.ascii	"ADC_SetSatMask\000"
 2326      53657453 
 2326      61744D61 
 2326      736B00
 2327              	.LASF55:
 2328 0143 766F6C74 		.ascii	"volts\000"
 2328      7300
 2329              	.LASF22:
 2330 0149 746D7052 		.ascii	"tmpRegVal\000"
 2330      65675661 
 2330      6C00
 2331              	.LASF3:
 2332 0153 73686F72 		.ascii	"short unsigned int\000"
 2332      7420756E 
 2332      7369676E 
 2332      65642069 
 2332      6E7400
 2333              	.LASF29:
 2334 0166 4144435F 		.ascii	"ADC_StopConvert\000"
 2334      53746F70 
 2334      436F6E76 
 2334      65727400 
 2335              	.LASF51:
 2336 0176 6D566F6C 		.ascii	"mVolts\000"
 2336      747300
 2337              	.LASF19:
 2338 017d 72656733 		.ascii	"reg32\000"
 2338      3200
 2339              	.LASF14:
 2340 0183 666C6F61 		.ascii	"float32\000"
 2340      74333200 
 2341              	.LASF20:
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 59


 2342 018b 73697A65 		.ascii	"sizetype\000"
 2342      74797065 
 2342      00
 2343              	.LASF62:
 2344 0194 433A5C55 		.ascii	"C:\\Users\\Johnny K\\Desktop\\PSoC_4_BLE_Eddystone_"
 2344      73657273 
 2344      5C4A6F68 
 2344      6E6E7920 
 2344      4B5C4465 
 2345 01c3 436F7079 		.ascii	"Copy_01.cydsn (2)\\PSoC_4_BLE_Eddystone_Copy_01_Cop"
 2345      5F30312E 
 2345      63796473 
 2345      6E202832 
 2345      295C5053 
 2346 01f5 795F3033 		.ascii	"y_03.cydsn\000"
 2346      2E637964 
 2346      736E00
 2347              	.LASF40:
 2348 0200 6C6F774C 		.ascii	"lowLimit\000"
 2348      696D6974 
 2348      00
 2349              	.LASF41:
 2350 0209 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2350      53657448 
 2350      6967684C 
 2350      696D6974 
 2350      00
 2351              	.LASF31:
 2352 021a 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2352      4973456E 
 2352      64436F6E 
 2352      76657273 
 2352      696F6E00 
 2353              	.LASF17:
 2354 022e 696E7436 		.ascii	"int64\000"
 2354      3400
 2355              	.LASF37:
 2356 0234 4144435F 		.ascii	"ADC_SetChanMask\000"
 2356      53657443 
 2356      68616E4D 
 2356      61736B00 
 2357              	.LASF47:
 2358 0244 4144435F 		.ascii	"ADC_SetGain\000"
 2358      53657447 
 2358      61696E00 
 2359              	.LASF15:
 2360 0250 666C6F61 		.ascii	"float\000"
 2360      7400
 2361              	.LASF42:
 2362 0256 68696768 		.ascii	"highLimit\000"
 2362      4C696D69 
 2362      7400
 2363              	.LASF49:
 2364 0260 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2364      436F756E 
 2364      7473546F 
 2364      5F6D566F 
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 60


 2364      6C747300 
 2365              	.LASF39:
 2366 0274 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2366      5365744C 
 2366      6F774C69 
 2366      6D697400 
 2367              	.LASF61:
 2368 0284 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC.c\000"
 2368      6E657261 
 2368      7465645F 
 2368      536F7572 
 2368      63655C50 
 2369              	.LASF1:
 2370 02a3 756E7369 		.ascii	"unsigned char\000"
 2370      676E6564 
 2370      20636861 
 2370      7200
 2371              	.LASF58:
 2372 02b1 4144435F 		.ascii	"ADC_offset\000"
 2372      6F666673 
 2372      657400
 2373              	.LASF2:
 2374 02bc 73686F72 		.ascii	"short int\000"
 2374      7420696E 
 2374      7400
 2375              	.LASF27:
 2376 02c6 4144435F 		.ascii	"ADC_Stop\000"
 2376      53746F70 
 2376      00
 2377              	.LASF21:
 2378 02cf 63684E75 		.ascii	"chNum\000"
 2378      6D00
 2379              	.LASF34:
 2380 02d5 6368616E 		.ascii	"chan\000"
 2380      00
 2381              	.LASF18:
 2382 02da 63686172 		.ascii	"char\000"
 2382      00
 2383              	.LASF56:
 2384 02df 4144435F 		.ascii	"ADC_channelsConfig\000"
 2384      6368616E 
 2384      6E656C73 
 2384      436F6E66 
 2384      696700
 2385              	.LASF46:
 2386 02f2 6F666673 		.ascii	"offset\000"
 2386      657400
 2387              	.LASF50:
 2388 02f9 61646343 		.ascii	"adcCounts\000"
 2388      6F756E74 
 2388      7300
 2389              	.LASF26:
 2390 0303 4144435F 		.ascii	"ADC_Enable\000"
 2390      456E6162 
 2390      6C6500
 2391              	.LASF12:
 2392 030e 696E7431 		.ascii	"int16\000"
ARM GAS  C:\Users\JOHNNY~1\AppData\Local\Temp\cc3sxxiF.s 			page 61


 2392      3600
 2393              	.LASF45:
 2394 0314 4144435F 		.ascii	"ADC_SetOffset\000"
 2394      5365744F 
 2394      66667365 
 2394      7400
 2395              	.LASF60:
 2396 0322 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2396      4320342E 
 2396      392E3320 
 2396      32303135 
 2396      30333033 
 2397 0355 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 2397      20726576 
 2397      6973696F 
 2397      6E203232 
 2397      31323230 
 2398 0388 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2398      66756E63 
 2398      74696F6E 
 2398      2D736563 
 2398      74696F6E 
 2399              	.LASF35:
 2400 03b0 72657375 		.ascii	"result\000"
 2400      6C7400
 2401              	.LASF32:
 2402 03b7 4144435F 		.ascii	"ADC_GetResult16\000"
 2402      47657452 
 2402      6573756C 
 2402      74313600 
 2403              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
